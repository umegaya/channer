// generated by Proto2Typescript. do not touch!

declare module ChannerProto {
	interface ProtoBufModel {
		toArrayBuffer(): ArrayBuffer;
		//toBuffer(): NodeBuffer;
		//encode(): ByteBuffer;
		toBase64(): string;
		toString(): string;
	}

	export interface ProtoBufBuilder {
		Login: LoginBuilder;
		MsgHLC: MsgHLCBuilder;
		MsgOptions: MsgOptionsBuilder;
		Msg: MsgBuilder;
		
	}
}

declare module ChannerProto {

	export interface Login extends ProtoBufModel {
		hash: string;
		getHash() : string;
		setHash(hash : string): void;
		ts: number;
		getTs() : number;
		setTs(ts : number): void;
		
	}
	
	export interface LoginBuilder {
		new(): Login;
		decode(buffer: ArrayBuffer) : Login;
		//decode(buffer: NodeBuffer) : Login;
		//decode(buffer: ByteArrayBuffer) : Login;
		decode64(buffer: string) : Login;
		
	}	
}

declare module ChannerProto {

	export interface MsgHLC extends ProtoBufModel {
		ts_sec: number;
		getTsSec() : number;
		setTsSec(tsSec : number): void;
		logical_ts: number;
		getLogicalTs() : number;
		setLogicalTs(logicalTs : number): void;
		
	}
	
	export interface MsgHLCBuilder {
		new(): MsgHLC;
		decode(buffer: ArrayBuffer) : MsgHLC;
		//decode(buffer: NodeBuffer) : MsgHLC;
		//decode(buffer: ByteArrayBuffer) : MsgHLC;
		decode64(buffer: string) : MsgHLC;
		
	}	
}

declare module ChannerProto {

	export interface MsgOptions extends ProtoBufModel {
		refers: MsgHLC[];
		getRefers() : MsgHLC[];
		setRefers(refers : MsgHLC[]): void;
		no_fetch_url?: boolean;
		getNoFetchUrl() : boolean;
		setNoFetchUrl(noFetchUrl : boolean): void;
		
	}
	
	export interface MsgOptionsBuilder {
		new(): MsgOptions;
		decode(buffer: ArrayBuffer) : MsgOptions;
		//decode(buffer: NodeBuffer) : MsgOptions;
		//decode(buffer: ByteArrayBuffer) : MsgOptions;
		decode64(buffer: string) : MsgOptions;
		
	}	
}

declare module ChannerProto {

	export interface Msg extends ProtoBufModel {
		text: string;
		getText() : string;
		setText(text : string): void;
		options?: MsgOptions;
		getOptions() : MsgOptions;
		setOptions(options : MsgOptions): void;
		
	}
	
	export interface MsgBuilder {
		new(): Msg;
		decode(buffer: ArrayBuffer) : Msg;
		//decode(buffer: NodeBuffer) : Msg;
		//decode(buffer: ByteArrayBuffer) : Msg;
		decode64(buffer: string) : Msg;
		
	}	
}
