syntax = "proto2";

package ChannerProto;

//common payload in message
message HLC {
	required uint64 walltime = 1;
	required uint32 logical_ts = 2;
}

message Post {
	message Options {
		repeated HLC refers = 1;
		optional bool no_fetch_url = 2;
	}
	required string text = 1;
	optional HLC ts = 2;
	optional Options options = 3;
}

message Topic {
	required string name = 1;
	required HLC last_read_ts = 2;
	repeated Post recent_posts = 3;
}




//requests 
message LoginRequest {
	required uint64 walltime = 1;
	required string user = 2;
	required string version = 3;
	optional uint64 id = 4;
	optional string sign = 5; //walltime + username + password + salt with sha256 
	optional string pass = 6; //only first time (before this client receive unique salt from server)
	optional string device_id = 7; //if sent from mobile device, it should be specified
	optional string device_type = 8;
	optional string rescue = 9; //to recover accout
}

message PostRequest {
	required uint64 topic_id = 2;
	required uint64 walltime = 3;
	required Post post = 4;
}

message FetchRequest {
	required HLC start_at = 2;
	optional HLC end_at = 3;
	optional uint32 count = 4;
}

message ReadRequest {
	required uint64 topic_id = 2;
	required HLC read_post_ts = 3;
}

message EnterTopicRequest {
	required uint64 topic_id = 2;
}

message ExitTopicRequest {
	required uint64 topic_id = 2;
}

message PingRequest {
	required uint64 walltime = 1;
}




//response
message LoginResponse {
	required uint64 id = 1;
	required string secret = 2;
}

message PostResponse {
	required HLC posted_at = 1;
}

message FetchResponse {
	repeated Post posts = 1;
}

message ReadResponse {
}

message EnterTopicResponse {
}

message ExitTopicResponse {
}

message PingResponse {
	required uint64 walltime = 1;
}




//response error
message Error {
	enum Type {
		Timeout = 1;
		Login_InvalidAuth = 2;
		Login_UserNotFound = 3;
		Login_UserAlreadyExists = 4;
		Login_OutdatedVersion = 5;
		Login_DatabaseError = 6;
	}
	required Type type = 1;
	optional string explanation = 2;
}




//notification




//total payload
message Payload {
	enum Type { 
		LoginRequest = 1; PostRequest = 2; FetchRequest = 3; ReadRequest = 4; EnterTopicRequest = 5; ExitTopicRequest = 6; PingRequest = 7;
		LoginResponse = 31; PostResponse = 32; FetchResponse = 33; ReadResponse = 34; EnterTopicResponse = 35; ExitTopicResponse = 36; PingResponse = 37;
		PostNotify = 61;
		Error = 101;
	}
	required Type type = 1;
	optional uint32 msgid = 2;
	optional LoginRequest login_request = 3;
	optional PostRequest post_request = 4;
	optional FetchRequest fetch_request = 5;
	optional ReadRequest read_request = 6;
	optional EnterTopicRequest enter_topic_request = 7;
	optional ExitTopicRequest exit_topic_request = 8;
	optional PingRequest ping_request = 9;

	optional Error error = 30;

	optional LoginResponse login_response = 31;
	optional PostResponse post_response = 32;
	optional FetchResponse fetch_response = 33;
	optional ReadResponse read_response = 34;
	optional EnterTopicResponse enter_topic_response = 35;
	optional ExitTopicResponse exit_topic_response = 36;
	optional PingResponse ping_response = 37;

	optional Post post_notify = 61;
}
