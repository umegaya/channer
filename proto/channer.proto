syntax = "proto2";

package ChannerProto;

import "github.com/gogo/protobuf/gogoproto/gogo.proto";

//common payload in message
message HLC {
	required uint64 walltime = 1;
	required uint32 logical_ts = 2;
}

message Post {
	message Options {
		repeated HLC refers = 1;
		optional bool fetch_url = 2;
	}
	required string text = 1;
	optional HLC ts = 2;
	optional Options options = 3;
}

message Topic {
	required string name = 1;
	required HLC last_read_ts = 2;
	repeated Post recent_posts = 3;
}

//database model definition
message Model {	
	message Account {
		enum Type {
			Unknown = 0;
			User = 1;
			Bot = 2;
		}
		enum Status {
			None = 0;
			Banned = 1;
			Admin = 2;
		}
		required uint64 id = 1 [(gogoproto.casttype) = "UUID"];
		required string user = 2;
		required Type type = 3;
		required string secret = 4;
		required string pass = 5;
		required string mail = 6;
		//when user forget password, we set some random hash here and login command with same value of this, can replace hash with new value
		required uint32 status = 7;
		required string rescue = 8;
	}

	message Channel {
		required uint64 id = 1 [(gogoproto.casttype) = "UUID"];
		required string name = 2;
		required string style = 3;
	}

	message Device {
		required string id = 1;
		required string type = 2;
		required uint64 account = 3 [(gogoproto.casttype) = "UUID"];
		required string last_from = 4;
		required int64 last_access = 5;
	}

	message Node {
		required uint32 id = 1 [(gogoproto.casttype) = "UUID"];
		required string address = 2;
		required uint64 seed = 3;
	}

	message Persona {
		required uint64 id = 1 [(gogoproto.casttype) = "UUID"];
		required uint64 channel = 2 [(gogoproto.casttype) = "UUID"];
		required uint64 account = 3 [(gogoproto.casttype) = "UUID"];
		required string name = 4;
	}

	message Post {
		required uint64 id = 1 [(gogoproto.casttype) = "UUID"]; 
		required uint64 topic = 2 [(gogoproto.casttype) = "UUID"];//parent topic id
		required uint64 persona = 3 [(gogoproto.casttype) = "UUID"];//persona who post it.
		required uint64 attr = 4;//attr flag (banned or something)
		required string text = 5;//posted text
	}

	message Topic {
		required uint64 id = 1 [(gogoproto.casttype) = "UUID"];
		required string name = 2;
	}

	message Reaction {
		enum Type {
			Unknown = 0;
			Star = 1;
			Other = 2;
			Admin = 3;
		}
		required uint64 id = 1 [(gogoproto.casttype) = "UUID"];
		required uint64 post = 2 [(gogoproto.casttype) = "UUID"]; //parent post id
		required Type type = 3;//0: star, 1: other emoji reactions, 2: special reactions (like ban)
		required uint64 persona = 4 [(gogoproto.casttype) = "UUID"];//persona who react it.
		required string text = 5;//0: empty string, 1: emoji definition. 2: misc data (maybe JSON)
	}

	message Service {
		required uint64 id = 1 [(gogoproto.casttype) = "UUID"];
		required uint64 channel = 2 [(gogoproto.casttype) = "UUID"];
		required uint64 account = 3 [(gogoproto.casttype) = "UUID"];
	}
}

//requests 
message LoginRequest {
	required uint64 walltime = 1;
	required string user = 2;
	required string version = 3;
	optional string mail = 4;
	optional string id = 5 [(gogoproto.nullable) = true]; //actually uint64 integer. but js isnt good at handle this.
	optional string sign = 6 [(gogoproto.nullable) = true]; //walltime + username + password + salt with sha256 
	optional string pass = 7 [(gogoproto.nullable) = true]; //only first time (before this client receive unique salt from server)
	optional string device_id = 8 [(gogoproto.nullable) = true]; //if sent from mobile device, it should be specified
	optional string device_type = 9 [(gogoproto.nullable) = true];
	optional string rescue = 10 [(gogoproto.nullable) = true]; //to recover accout
}

message PostRequest {
	required uint64 topic_id = 1;
	required uint64 walltime = 2;
	required Post post = 3;
}

message FetchRequest {
	required HLC start_at = 1;
	optional HLC end_at = 2;
	optional uint32 count = 3;
}

message ReadRequest {
	required uint64 topic_id = 1;
	required HLC read_post_ts = 2;
}

message EnterTopicRequest {
	required uint64 topic_id = 1;
}

message ExitTopicRequest {
	required uint64 topic_id = 1;
}

message PingRequest {
	required uint64 walltime = 1;
}




//response
message LoginResponse {
	required string id = 1;  //actually uint64 integer. but js isnt good at handle this.
	required string secret = 2;
}

message PostResponse {
	required HLC posted_at = 1;
}

message FetchResponse {
	repeated Post posts = 1;
}

message ReadResponse {
}

message EnterTopicResponse {
}

message ExitTopicResponse {
}

message PingResponse {
	required uint64 walltime = 1;
}




//response error
message Error {
	enum Type {
		Unknown = 0;
		Timeout = 1;
		Login_InvalidAuth = 2;
		Login_UserNotFound = 3;
		Login_UserAlreadyExists = 4;
		Login_OutdatedVersion = 5;
		Login_DatabaseError = 6;
		Login_BrokenClientData = 7;
	}
	required Type type = 1;
	optional string explanation = 2;
}




//notification




//total payload
message Payload {
	enum Type { 
		Unknown = 0;
		LoginRequest = 1; PostRequest = 2; FetchRequest = 3; ReadRequest = 4; EnterTopicRequest = 5; ExitTopicRequest = 6; PingRequest = 7;
		LoginResponse = 31; PostResponse = 32; FetchResponse = 33; ReadResponse = 34; EnterTopicResponse = 35; ExitTopicResponse = 36; PingResponse = 37;
		PostNotify = 61;
		Error = 101;
	}
	required Type type = 1;
	optional uint32 msgid = 2;
	optional LoginRequest login_request = 3;
	optional PostRequest post_request = 4;
	optional FetchRequest fetch_request = 5;
	optional ReadRequest read_request = 6;
	optional EnterTopicRequest enter_topic_request = 7;
	optional ExitTopicRequest exit_topic_request = 8;
	optional PingRequest ping_request = 9;

	optional Error error = 30;

	optional LoginResponse login_response = 31;
	optional PostResponse post_response = 32;
	optional FetchResponse fetch_response = 33;
	optional ReadResponse read_response = 34;
	optional EnterTopicResponse enter_topic_response = 35;
	optional ExitTopicResponse exit_topic_response = 36;
	optional PingResponse ping_response = 37;

	optional Post post_notify = 61;
}
