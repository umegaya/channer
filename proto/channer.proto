syntax = "proto2";

package ChannerProto;

import "github.com/gogo/protobuf/gogoproto/gogo.proto";

//common payload in message
message HLC {
	required uint64 walltime = 1;
	required uint32 logical_ts = 2;
}

message Post {
	message Options {
		repeated HLC refers = 1;
		optional bool fetch_url = 2;
	}
	required string text = 1;
	optional HLC ts = 2;
	optional Options options = 3;
}

message Topic {
	required string name = 1;
	required HLC last_read_ts = 2;
	repeated Post recent_posts = 3;
}

//database model definition
message Model {	
	message Account {
		enum Type {
			Unknown = 0;
			User = 1;
			Bot = 2;
		}
		enum Status {	//flags.
			None = 0;
			Banned = 1;
			Admin = 2;
		}
		required fixed64 id = 1 [(gogoproto.casttype) = "UUID"];
		required string user = 2;
		required Type type = 3;
		required string secret = 4;
		required string pass = 5;
		required string mail = 6;
		required uint32 status = 7;
	}

	message Rescue {
		required bytes id = 1;
		required fixed64 account = 2 [(gogoproto.casttype) = "UUID"];
		required int64 valid_date = 3;
	}

	message Channel {
		enum IdentityLevel {
			Unknown = 0;
			None = 1;		//no identity. it means no identifier is assigned for every post in this channel.
			Topic = 2;		//topic-level identity. it means all post in same topic by same persona, will be assigned identifier.
			Channel = 3;	//channel-level identify(default). it means among all post in same channel by same persona, it will have same identifier.
			Account = 4;	//accont-level identity. it means among all post in this channel, it will show original account id of submitter.
		}
		enum TopicDisplayStyle {
			Invalid = 0;
			Tail = 1;		//all post show in time-series order(default). eg. 2ch, github, and most of forum
			Tree = 2;		//post shows with respecting graph structure defined by "in reply to which post". eg. reddit, 4chan
		}
		message Options {
			optional IdentityLevel identity  = 1;				//how user can know identity of submitter
			optional TopicDisplayStyle topic_display_style = 2;	//how topic shows
			optional uint32 topic_post_limit = 3;				//how many post can be posted to same topic?
			optional string anonymous_name = 4;					//how anonymous to be shown its name? eg. 名無しさん.
		}
		required fixed64 id = 1 [(gogoproto.casttype) = "UUID"];
		required string name = 2;
		required string locale = 3;
		required uint32 category = 4;
		optional string description = 5;
		required string style = 6;
		required fixed64 established = 7 [(gogoproto.casttype) = "UUID"];	//account id which create this channel TODO: forum creation limit per account.
		required uint64 watcher = 9;
		required bytes options = 10;
	}

	message Device {
		required string id = 1;
		required string type = 2;
		required uint64 account = 3 [(gogoproto.casttype) = "UUID"];
		required string last_from = 4;
		required int64 last_access = 5;
	}

	message Node {
		required fixed64 id = 1 [(gogoproto.casttype) = "UUID"];
		required string address = 2;
		required uint64 seed = 3;
	}

	message Persona {
		required fixed64 id = 1 [(gogoproto.casttype) = "UUID"];
		required fixed64 channel = 2 [(gogoproto.casttype) = "UUID"];
		required fixed64 account = 3 [(gogoproto.casttype) = "UUID"];
		required string name = 4;
	}

	message Reactions {
		message Entry {
			required fixed64 id = 1;
			required fixed64 count = 2;
		}
		repeated Entry entries = 3;
	}

	message Post {
		required fixed64 id = 1 [(gogoproto.casttype) = "UUID"]; 
		required fixed64 topic = 2 [(gogoproto.casttype) = "UUID"];//parent topic id
		required fixed64 persona = 3 [(gogoproto.casttype) = "UUID"];//persona who post it.
		required uint64 attr = 4;//attr flag (banned or something)
		required fixed32 point = 5;
		required fixed32 vote = 6;
		required string text = 7;//posted text
		required bytes reactions = 8; //packed Reactions message
	}

	message Topic {
		required fixed64 id = 1 [(gogoproto.casttype) = "UUID"];
		required fixed64 channel = 2 [(gogoproto.casttype) = "UUID"];
		required string name = 3;
		required fixed32 point = 4;
		required fixed32 vote = 5;
		required fixed32 comment = 6;
	}

	message Reaction {
		enum Type {
			Unknown = 0;
			Post = 1;
			Topic = 2;
			Channel = 3;
			Post_Vote = 11;
			Topic_Vote = 12;
			Channel_Watch = 13;
		}
		required fixed64 id = 1 [(gogoproto.casttype) = "UUID"]; //unique id
		required fixed64 target = 2 [(gogoproto.casttype) = "UUID"]; //target object id
		required fixed64 persona = 3 [(gogoproto.casttype) = "UUID"];//persona who react target.
		required Type type = 4;//0: star, 1: other emoji reactions, 2: special reactions (like ban)
		required fixed64 param = 5;//+1,-1 for vote reaction. emoji_id for other reaction
	}

	message Service {
		required fixed64 id = 1 [(gogoproto.casttype) = "UUID"];
		required fixed64 channel = 2 [(gogoproto.casttype) = "UUID"];
		required fixed64 account = 3 [(gogoproto.casttype) = "UUID"];
	}
}

//requests 
message LoginRequest {
	required uint64 walltime = 1;
	required string user = 2;
	required string version = 3;
	optional string mail = 4;
	optional fixed64 id = 5 [(gogoproto.nullable) = true, (gogoproto.casttype) = "UUID"]; //actually uint64 integer. but js isnt good at handle this.
	optional string sign = 6 [(gogoproto.nullable) = true]; //walltime + username + password + salt with sha256 
	optional string pass = 7 [(gogoproto.nullable) = true]; //only first time (before this client receive unique salt from server)
	optional string device_id = 8 [(gogoproto.nullable) = true]; //if sent from mobile device, it should be specified
	optional string device_type = 9 [(gogoproto.nullable) = true];
	optional string rescue = 10 [(gogoproto.nullable) = true]; //to recover accout
}

message PostRequest {
	required fixed64 topic_id = 1 [(gogoproto.casttype) = "UUID"];
	required uint64 walltime = 2;
	required Post post = 3;
}

message FetchRequest {
	required HLC start_at = 1;
	optional HLC end_at = 2;
	optional uint32 count = 3;
}

message ReadRequest {
	required fixed64 topic_id = 1 [(gogoproto.casttype) = "UUID"];
	required HLC read_post_ts = 2;
}

message EnterTopicRequest {
	required fixed64 topic_id = 1 [(gogoproto.casttype) = "UUID"];
}

message ExitTopicRequest {
	required fixed64 topic_id = 1 [(gogoproto.casttype) = "UUID"];
}

message PingRequest {
	required uint64 walltime = 1;
}

message RescueRequest {
	required fixed64 account = 1 [(gogoproto.casttype) = "UUID"];
	required string sign = 2;
	required uint64 walltime = 3;
}

message ChannelCreateRequest {
	required string name = 1;
	required string locale = 2;
	required uint32 category = 3;
	optional string description = 4;
	optional string style = 5;
	optional Model.Channel.Options options = 6;
}

message ChannelListRequest {
	enum QueryType {
		None = 0;
		New = 1;
		Popular = 2;
	}
	required QueryType query = 1;
	optional string locale = 2;
	optional uint32 category = 3;
	optional int32 limit = 4;
	optional fixed64 offset_id = 5 [(gogoproto.nullable) = true];
}

message TopicListRequest {
	enum BucketType {
		Invalid = 0;
		Rising = 1;
		Hot = 2;
		Flame = 3;
	}
	enum QueryType {
		None = 0;
		Hour = 1;
		Day = 2;
		Week = 3;
		AllTime = 4;

		QueryCacheEnd = 4; //AllTime
		End = 4;
	}
	required QueryType query = 1;
	optional string locale = 2;
	optional int32 limit = 3;
	optional fixed64 offset_id = 4 [(gogoproto.nullable) = true];
}


//response
message LoginResponse {
	required fixed64 id = 1 [(gogoproto.casttype) = "UUID"];
	required string secret = 2;
	optional string pass = 3 [(gogoproto.nullable) = true];
	optional string mail = 4 [(gogoproto.nullable) = true];
	optional string user = 5 [(gogoproto.nullable) = true];
}

message PostResponse {
	required HLC posted_at = 1;
}

message FetchResponse {
	repeated Post posts = 1;
}

message ReadResponse {
}

message EnterTopicResponse {
}

message ExitTopicResponse {
}

message PingResponse {
	required uint64 walltime = 1;
}

message RescueResponse {
	required string url = 1;
	required int64 remain = 2;
}

message ChannelCreateResponse {
	required Model.Channel channel = 1;
}

message ChannelListResponse {
	repeated Model.Channel list = 1;
}



//response error
message Error {
	enum Type {
		Unknown = 0;
		Timeout = 1;
		InvalidPayload = 2;

		Login_InvalidAuth = 10;
		Login_UserNotFound = 11;
		Login_UserAlreadyExists = 12;
		Login_OutdatedVersion = 13;
		Login_DatabaseError = 14;
		Login_BrokenClientData = 15;

		Rescue_DatabaseError = 20;
		Rescue_CannotRescue = 21;
		Rescue_InvalidAuth = 22;

		ChannelCreate_DatabaseError = 30;

		ChannelList_DatabaseError = 40;
	}
	required Type type = 1;
	optional string explanation = 2;
}




//notification




//total payload
message Payload {
	enum Type { 
		Unknown = 0;
		LoginRequest = 1; PostRequest = 2; FetchRequest = 3; ReadRequest = 4; EnterTopicRequest = 5; ExitTopicRequest = 6; PingRequest = 7; 
		RescueRequest = 8; ChannelCreateRequest = 9; ChannelListRequest = 10;
		LoginResponse = 31; PostResponse = 32; FetchResponse = 33; ReadResponse = 34; EnterTopicResponse = 35; ExitTopicResponse = 36; PingResponse = 37; 
		RescueResponse = 38; ChannelCreateResponse = 39; ChannelListResponse = 40;
		PostNotify = 61;
		Error = 101;
	}
	required Type type = 1;
	optional uint32 msgid = 2;
	optional LoginRequest login_request = 3;
	optional PostRequest post_request = 4;
	optional FetchRequest fetch_request = 5;
	optional ReadRequest read_request = 6;
	optional EnterTopicRequest enter_topic_request = 7;
	optional ExitTopicRequest exit_topic_request = 8;
	optional PingRequest ping_request = 9;
	optional RescueRequest rescue_request = 10;
	optional ChannelCreateRequest channel_create_request = 11;
	optional ChannelListRequest channel_list_request = 12;

	optional Error error = 30;

	optional LoginResponse login_response = 31;
	optional PostResponse post_response = 32;
	optional FetchResponse fetch_response = 33;
	optional ReadResponse read_response = 34;
	optional EnterTopicResponse enter_topic_response = 35;
	optional ExitTopicResponse exit_topic_response = 36;
	optional PingResponse ping_response = 37;
	optional RescueResponse rescue_response = 38;
	optional ChannelCreateResponse channel_create_response = 39;
	optional ChannelListResponse channel_list_response = 40;

	optional Post post_notify = 61;
}
