// Code generated by protoc-gen-gogo.
// source: channer.proto
// DO NOT EDIT!

/*
	Package ChannerProto is a generated protocol buffer package.

	It is generated from these files:
		channer.proto

	It has these top-level messages:
		HLC
		Post
		Topic
		Model
		LoginRequest
		PostRequest
		FetchRequest
		ReadRequest
		EnterTopicRequest
		ExitTopicRequest
		PingRequest
		RescueRequest
		ChannelCreateRequest
		ChannelListRequest
		LoginResponse
		PostResponse
		FetchResponse
		ReadResponse
		EnterTopicResponse
		ExitTopicResponse
		PingResponse
		RescueResponse
		ChannelCreateResponse
		ChannelListResponse
		Error
		Payload
*/
package ChannerProto

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import github_com_gogo_protobuf_proto "github.com/gogo/protobuf/proto"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type Model_Account_Type int32

const (
	Model_Account_Unknown Model_Account_Type = 0
	Model_Account_User    Model_Account_Type = 1
	Model_Account_Bot     Model_Account_Type = 2
)

var Model_Account_Type_name = map[int32]string{
	0: "Unknown",
	1: "User",
	2: "Bot",
}
var Model_Account_Type_value = map[string]int32{
	"Unknown": 0,
	"User":    1,
	"Bot":     2,
}

func (x Model_Account_Type) Enum() *Model_Account_Type {
	p := new(Model_Account_Type)
	*p = x
	return p
}
func (x Model_Account_Type) String() string {
	return proto.EnumName(Model_Account_Type_name, int32(x))
}
func (x *Model_Account_Type) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Model_Account_Type_value, data, "Model_Account_Type")
	if err != nil {
		return err
	}
	*x = Model_Account_Type(value)
	return nil
}

type Model_Account_Status int32

const (
	Model_Account_None   Model_Account_Status = 0
	Model_Account_Banned Model_Account_Status = 1
	Model_Account_Admin  Model_Account_Status = 2
)

var Model_Account_Status_name = map[int32]string{
	0: "None",
	1: "Banned",
	2: "Admin",
}
var Model_Account_Status_value = map[string]int32{
	"None":   0,
	"Banned": 1,
	"Admin":  2,
}

func (x Model_Account_Status) Enum() *Model_Account_Status {
	p := new(Model_Account_Status)
	*p = x
	return p
}
func (x Model_Account_Status) String() string {
	return proto.EnumName(Model_Account_Status_name, int32(x))
}
func (x *Model_Account_Status) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Model_Account_Status_value, data, "Model_Account_Status")
	if err != nil {
		return err
	}
	*x = Model_Account_Status(value)
	return nil
}

type Model_Channel_IdentityLevel int32

const (
	Model_Channel_Unknown Model_Channel_IdentityLevel = 0
	Model_Channel_None    Model_Channel_IdentityLevel = 1
	Model_Channel_Topic   Model_Channel_IdentityLevel = 2
	Model_Channel_Channel Model_Channel_IdentityLevel = 3
	Model_Channel_Account Model_Channel_IdentityLevel = 4
)

var Model_Channel_IdentityLevel_name = map[int32]string{
	0: "Unknown",
	1: "None",
	2: "Topic",
	3: "Channel",
	4: "Account",
}
var Model_Channel_IdentityLevel_value = map[string]int32{
	"Unknown": 0,
	"None":    1,
	"Topic":   2,
	"Channel": 3,
	"Account": 4,
}

func (x Model_Channel_IdentityLevel) Enum() *Model_Channel_IdentityLevel {
	p := new(Model_Channel_IdentityLevel)
	*p = x
	return p
}
func (x Model_Channel_IdentityLevel) String() string {
	return proto.EnumName(Model_Channel_IdentityLevel_name, int32(x))
}
func (x *Model_Channel_IdentityLevel) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Model_Channel_IdentityLevel_value, data, "Model_Channel_IdentityLevel")
	if err != nil {
		return err
	}
	*x = Model_Channel_IdentityLevel(value)
	return nil
}

type Model_Channel_TopicDisplayStyle int32

const (
	Model_Channel_Invalid Model_Channel_TopicDisplayStyle = 0
	Model_Channel_Tail    Model_Channel_TopicDisplayStyle = 1
	Model_Channel_Tree    Model_Channel_TopicDisplayStyle = 2
)

var Model_Channel_TopicDisplayStyle_name = map[int32]string{
	0: "Invalid",
	1: "Tail",
	2: "Tree",
}
var Model_Channel_TopicDisplayStyle_value = map[string]int32{
	"Invalid": 0,
	"Tail":    1,
	"Tree":    2,
}

func (x Model_Channel_TopicDisplayStyle) Enum() *Model_Channel_TopicDisplayStyle {
	p := new(Model_Channel_TopicDisplayStyle)
	*p = x
	return p
}
func (x Model_Channel_TopicDisplayStyle) String() string {
	return proto.EnumName(Model_Channel_TopicDisplayStyle_name, int32(x))
}
func (x *Model_Channel_TopicDisplayStyle) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Model_Channel_TopicDisplayStyle_value, data, "Model_Channel_TopicDisplayStyle")
	if err != nil {
		return err
	}
	*x = Model_Channel_TopicDisplayStyle(value)
	return nil
}

type Model_Reaction_Type int32

const (
	Model_Reaction_Unknown Model_Reaction_Type = 0
	Model_Reaction_Star    Model_Reaction_Type = 1
	Model_Reaction_Other   Model_Reaction_Type = 2
	Model_Reaction_Admin   Model_Reaction_Type = 3
)

var Model_Reaction_Type_name = map[int32]string{
	0: "Unknown",
	1: "Star",
	2: "Other",
	3: "Admin",
}
var Model_Reaction_Type_value = map[string]int32{
	"Unknown": 0,
	"Star":    1,
	"Other":   2,
	"Admin":   3,
}

func (x Model_Reaction_Type) Enum() *Model_Reaction_Type {
	p := new(Model_Reaction_Type)
	*p = x
	return p
}
func (x Model_Reaction_Type) String() string {
	return proto.EnumName(Model_Reaction_Type_name, int32(x))
}
func (x *Model_Reaction_Type) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Model_Reaction_Type_value, data, "Model_Reaction_Type")
	if err != nil {
		return err
	}
	*x = Model_Reaction_Type(value)
	return nil
}

type ChannelListRequest_Category int32

const (
	ChannelListRequest_None    ChannelListRequest_Category = 0
	ChannelListRequest_New     ChannelListRequest_Category = 1
	ChannelListRequest_Popular ChannelListRequest_Category = 2
)

var ChannelListRequest_Category_name = map[int32]string{
	0: "None",
	1: "New",
	2: "Popular",
}
var ChannelListRequest_Category_value = map[string]int32{
	"None":    0,
	"New":     1,
	"Popular": 2,
}

func (x ChannelListRequest_Category) Enum() *ChannelListRequest_Category {
	p := new(ChannelListRequest_Category)
	*p = x
	return p
}
func (x ChannelListRequest_Category) String() string {
	return proto.EnumName(ChannelListRequest_Category_name, int32(x))
}
func (x *ChannelListRequest_Category) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ChannelListRequest_Category_value, data, "ChannelListRequest_Category")
	if err != nil {
		return err
	}
	*x = ChannelListRequest_Category(value)
	return nil
}

type Error_Type int32

const (
	Error_Unknown                     Error_Type = 0
	Error_Timeout                     Error_Type = 1
	Error_Login_InvalidAuth           Error_Type = 2
	Error_Login_UserNotFound          Error_Type = 3
	Error_Login_UserAlreadyExists     Error_Type = 4
	Error_Login_OutdatedVersion       Error_Type = 5
	Error_Login_DatabaseError         Error_Type = 6
	Error_Login_BrokenClientData      Error_Type = 7
	Error_Rescue_DatabaseError        Error_Type = 10
	Error_Rescue_CannotRescue         Error_Type = 11
	Error_Rescue_InvalidAuth          Error_Type = 12
	Error_ChannelCreate_DatabaseError Error_Type = 20
	Error_ChannelList_DatabaseError   Error_Type = 30
)

var Error_Type_name = map[int32]string{
	0:  "Unknown",
	1:  "Timeout",
	2:  "Login_InvalidAuth",
	3:  "Login_UserNotFound",
	4:  "Login_UserAlreadyExists",
	5:  "Login_OutdatedVersion",
	6:  "Login_DatabaseError",
	7:  "Login_BrokenClientData",
	10: "Rescue_DatabaseError",
	11: "Rescue_CannotRescue",
	12: "Rescue_InvalidAuth",
	20: "ChannelCreate_DatabaseError",
	30: "ChannelList_DatabaseError",
}
var Error_Type_value = map[string]int32{
	"Unknown":                     0,
	"Timeout":                     1,
	"Login_InvalidAuth":           2,
	"Login_UserNotFound":          3,
	"Login_UserAlreadyExists":     4,
	"Login_OutdatedVersion":       5,
	"Login_DatabaseError":         6,
	"Login_BrokenClientData":      7,
	"Rescue_DatabaseError":        10,
	"Rescue_CannotRescue":         11,
	"Rescue_InvalidAuth":          12,
	"ChannelCreate_DatabaseError": 20,
	"ChannelList_DatabaseError":   30,
}

func (x Error_Type) Enum() *Error_Type {
	p := new(Error_Type)
	*p = x
	return p
}
func (x Error_Type) String() string {
	return proto.EnumName(Error_Type_name, int32(x))
}
func (x *Error_Type) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Error_Type_value, data, "Error_Type")
	if err != nil {
		return err
	}
	*x = Error_Type(value)
	return nil
}

type Payload_Type int32

const (
	Payload_Unknown               Payload_Type = 0
	Payload_LoginRequest          Payload_Type = 1
	Payload_PostRequest           Payload_Type = 2
	Payload_FetchRequest          Payload_Type = 3
	Payload_ReadRequest           Payload_Type = 4
	Payload_EnterTopicRequest     Payload_Type = 5
	Payload_ExitTopicRequest      Payload_Type = 6
	Payload_PingRequest           Payload_Type = 7
	Payload_RescueRequest         Payload_Type = 8
	Payload_ChannelCreateRequest  Payload_Type = 9
	Payload_ChannelListRequest    Payload_Type = 10
	Payload_LoginResponse         Payload_Type = 31
	Payload_PostResponse          Payload_Type = 32
	Payload_FetchResponse         Payload_Type = 33
	Payload_ReadResponse          Payload_Type = 34
	Payload_EnterTopicResponse    Payload_Type = 35
	Payload_ExitTopicResponse     Payload_Type = 36
	Payload_PingResponse          Payload_Type = 37
	Payload_RescueResponse        Payload_Type = 38
	Payload_ChannelCreateResponse Payload_Type = 39
	Payload_ChannelListResponse   Payload_Type = 40
	Payload_PostNotify            Payload_Type = 61
	Payload_Error                 Payload_Type = 101
)

var Payload_Type_name = map[int32]string{
	0:   "Unknown",
	1:   "LoginRequest",
	2:   "PostRequest",
	3:   "FetchRequest",
	4:   "ReadRequest",
	5:   "EnterTopicRequest",
	6:   "ExitTopicRequest",
	7:   "PingRequest",
	8:   "RescueRequest",
	9:   "ChannelCreateRequest",
	10:  "ChannelListRequest",
	31:  "LoginResponse",
	32:  "PostResponse",
	33:  "FetchResponse",
	34:  "ReadResponse",
	35:  "EnterTopicResponse",
	36:  "ExitTopicResponse",
	37:  "PingResponse",
	38:  "RescueResponse",
	39:  "ChannelCreateResponse",
	40:  "ChannelListResponse",
	61:  "PostNotify",
	101: "Error",
}
var Payload_Type_value = map[string]int32{
	"Unknown":               0,
	"LoginRequest":          1,
	"PostRequest":           2,
	"FetchRequest":          3,
	"ReadRequest":           4,
	"EnterTopicRequest":     5,
	"ExitTopicRequest":      6,
	"PingRequest":           7,
	"RescueRequest":         8,
	"ChannelCreateRequest":  9,
	"ChannelListRequest":    10,
	"LoginResponse":         31,
	"PostResponse":          32,
	"FetchResponse":         33,
	"ReadResponse":          34,
	"EnterTopicResponse":    35,
	"ExitTopicResponse":     36,
	"PingResponse":          37,
	"RescueResponse":        38,
	"ChannelCreateResponse": 39,
	"ChannelListResponse":   40,
	"PostNotify":            61,
	"Error":                 101,
}

func (x Payload_Type) Enum() *Payload_Type {
	p := new(Payload_Type)
	*p = x
	return p
}
func (x Payload_Type) String() string {
	return proto.EnumName(Payload_Type_name, int32(x))
}
func (x *Payload_Type) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Payload_Type_value, data, "Payload_Type")
	if err != nil {
		return err
	}
	*x = Payload_Type(value)
	return nil
}

// common payload in message
type HLC struct {
	Walltime  uint64 `protobuf:"varint,1,req,name=walltime" json:"walltime"`
	LogicalTs uint32 `protobuf:"varint,2,req,name=logical_ts" json:"logical_ts"`
}

func (m *HLC) Reset()         { *m = HLC{} }
func (m *HLC) String() string { return proto.CompactTextString(m) }
func (*HLC) ProtoMessage()    {}

func (m *HLC) GetWalltime() uint64 {
	if m != nil {
		return m.Walltime
	}
	return 0
}

func (m *HLC) GetLogicalTs() uint32 {
	if m != nil {
		return m.LogicalTs
	}
	return 0
}

type Post struct {
	Text    string        `protobuf:"bytes,1,req,name=text" json:"text"`
	Ts      *HLC          `protobuf:"bytes,2,opt,name=ts" json:"ts,omitempty"`
	Options *Post_Options `protobuf:"bytes,3,opt,name=options" json:"options,omitempty"`
}

func (m *Post) Reset()         { *m = Post{} }
func (m *Post) String() string { return proto.CompactTextString(m) }
func (*Post) ProtoMessage()    {}

func (m *Post) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

func (m *Post) GetTs() *HLC {
	if m != nil {
		return m.Ts
	}
	return nil
}

func (m *Post) GetOptions() *Post_Options {
	if m != nil {
		return m.Options
	}
	return nil
}

type Post_Options struct {
	Refers   []*HLC `protobuf:"bytes,1,rep,name=refers" json:"refers,omitempty"`
	FetchUrl bool   `protobuf:"varint,2,opt,name=fetch_url" json:"fetch_url"`
}

func (m *Post_Options) Reset()         { *m = Post_Options{} }
func (m *Post_Options) String() string { return proto.CompactTextString(m) }
func (*Post_Options) ProtoMessage()    {}

func (m *Post_Options) GetRefers() []*HLC {
	if m != nil {
		return m.Refers
	}
	return nil
}

func (m *Post_Options) GetFetchUrl() bool {
	if m != nil {
		return m.FetchUrl
	}
	return false
}

type Topic struct {
	Name        string  `protobuf:"bytes,1,req,name=name" json:"name"`
	LastReadTs  *HLC    `protobuf:"bytes,2,req,name=last_read_ts" json:"last_read_ts,omitempty"`
	RecentPosts []*Post `protobuf:"bytes,3,rep,name=recent_posts" json:"recent_posts,omitempty"`
}

func (m *Topic) Reset()         { *m = Topic{} }
func (m *Topic) String() string { return proto.CompactTextString(m) }
func (*Topic) ProtoMessage()    {}

func (m *Topic) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Topic) GetLastReadTs() *HLC {
	if m != nil {
		return m.LastReadTs
	}
	return nil
}

func (m *Topic) GetRecentPosts() []*Post {
	if m != nil {
		return m.RecentPosts
	}
	return nil
}

// database model definition
type Model struct {
}

func (m *Model) Reset()         { *m = Model{} }
func (m *Model) String() string { return proto.CompactTextString(m) }
func (*Model) ProtoMessage()    {}

type Model_Account struct {
	Id     UUID               `protobuf:"varint,1,req,name=id,casttype=UUID" json:"id"`
	User   string             `protobuf:"bytes,2,req,name=user" json:"user"`
	Type   Model_Account_Type `protobuf:"varint,3,req,name=type,enum=ChannerProto.Model_Account_Type" json:"type"`
	Secret string             `protobuf:"bytes,4,req,name=secret" json:"secret"`
	Pass   string             `protobuf:"bytes,5,req,name=pass" json:"pass"`
	Mail   string             `protobuf:"bytes,6,req,name=mail" json:"mail"`
	// when user forget password, we set some random hash here and login command with same value of this, can replace hash with new value
	Status uint32 `protobuf:"varint,7,req,name=status" json:"status"`
}

func (m *Model_Account) Reset()         { *m = Model_Account{} }
func (m *Model_Account) String() string { return proto.CompactTextString(m) }
func (*Model_Account) ProtoMessage()    {}

func (m *Model_Account) GetId() UUID {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Model_Account) GetUser() string {
	if m != nil {
		return m.User
	}
	return ""
}

func (m *Model_Account) GetType() Model_Account_Type {
	if m != nil {
		return m.Type
	}
	return Model_Account_Unknown
}

func (m *Model_Account) GetSecret() string {
	if m != nil {
		return m.Secret
	}
	return ""
}

func (m *Model_Account) GetPass() string {
	if m != nil {
		return m.Pass
	}
	return ""
}

func (m *Model_Account) GetMail() string {
	if m != nil {
		return m.Mail
	}
	return ""
}

func (m *Model_Account) GetStatus() uint32 {
	if m != nil {
		return m.Status
	}
	return 0
}

type Model_Rescue struct {
	Id        []byte `protobuf:"bytes,1,req,name=id" json:"id"`
	Account   string `protobuf:"bytes,2,req,name=account" json:"account"`
	ValidDate int64  `protobuf:"varint,3,req,name=valid_date" json:"valid_date"`
}

func (m *Model_Rescue) Reset()         { *m = Model_Rescue{} }
func (m *Model_Rescue) String() string { return proto.CompactTextString(m) }
func (*Model_Rescue) ProtoMessage()    {}

func (m *Model_Rescue) GetId() []byte {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *Model_Rescue) GetAccount() string {
	if m != nil {
		return m.Account
	}
	return ""
}

func (m *Model_Rescue) GetValidDate() int64 {
	if m != nil {
		return m.ValidDate
	}
	return 0
}

type Model_Channel struct {
	Id          UUID   `protobuf:"varint,1,req,name=id,casttype=UUID" json:"id"`
	Name        string `protobuf:"bytes,2,req,name=name" json:"name"`
	Description string `protobuf:"bytes,3,opt,name=description" json:"description"`
	Style       string `protobuf:"bytes,4,req,name=style" json:"style"`
	Established UUID   `protobuf:"varint,5,req,name=established,casttype=UUID" json:"established"`
	Options     []byte `protobuf:"bytes,6,req,name=options" json:"options"`
}

func (m *Model_Channel) Reset()         { *m = Model_Channel{} }
func (m *Model_Channel) String() string { return proto.CompactTextString(m) }
func (*Model_Channel) ProtoMessage()    {}

func (m *Model_Channel) GetId() UUID {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Model_Channel) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Model_Channel) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Model_Channel) GetStyle() string {
	if m != nil {
		return m.Style
	}
	return ""
}

func (m *Model_Channel) GetEstablished() UUID {
	if m != nil {
		return m.Established
	}
	return 0
}

func (m *Model_Channel) GetOptions() []byte {
	if m != nil {
		return m.Options
	}
	return nil
}

type Model_Channel_Options struct {
	Identity          Model_Channel_IdentityLevel     `protobuf:"varint,1,opt,name=identity,enum=ChannerProto.Model_Channel_IdentityLevel" json:"identity"`
	TopicDisplayStyle Model_Channel_TopicDisplayStyle `protobuf:"varint,2,opt,name=topic_display_style,enum=ChannerProto.Model_Channel_TopicDisplayStyle" json:"topic_display_style"`
	TopicPostLimit    uint32                          `protobuf:"varint,3,opt,name=topic_post_limit" json:"topic_post_limit"`
	AnonymousName     string                          `protobuf:"bytes,4,opt,name=anonymous_name" json:"anonymous_name"`
}

func (m *Model_Channel_Options) Reset()         { *m = Model_Channel_Options{} }
func (m *Model_Channel_Options) String() string { return proto.CompactTextString(m) }
func (*Model_Channel_Options) ProtoMessage()    {}

func (m *Model_Channel_Options) GetIdentity() Model_Channel_IdentityLevel {
	if m != nil {
		return m.Identity
	}
	return Model_Channel_Unknown
}

func (m *Model_Channel_Options) GetTopicDisplayStyle() Model_Channel_TopicDisplayStyle {
	if m != nil {
		return m.TopicDisplayStyle
	}
	return Model_Channel_Invalid
}

func (m *Model_Channel_Options) GetTopicPostLimit() uint32 {
	if m != nil {
		return m.TopicPostLimit
	}
	return 0
}

func (m *Model_Channel_Options) GetAnonymousName() string {
	if m != nil {
		return m.AnonymousName
	}
	return ""
}

type Model_Device struct {
	Id         string `protobuf:"bytes,1,req,name=id" json:"id"`
	Type       string `protobuf:"bytes,2,req,name=type" json:"type"`
	Account    UUID   `protobuf:"varint,3,req,name=account,casttype=UUID" json:"account"`
	LastFrom   string `protobuf:"bytes,4,req,name=last_from" json:"last_from"`
	LastAccess int64  `protobuf:"varint,5,req,name=last_access" json:"last_access"`
}

func (m *Model_Device) Reset()         { *m = Model_Device{} }
func (m *Model_Device) String() string { return proto.CompactTextString(m) }
func (*Model_Device) ProtoMessage()    {}

func (m *Model_Device) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Model_Device) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *Model_Device) GetAccount() UUID {
	if m != nil {
		return m.Account
	}
	return 0
}

func (m *Model_Device) GetLastFrom() string {
	if m != nil {
		return m.LastFrom
	}
	return ""
}

func (m *Model_Device) GetLastAccess() int64 {
	if m != nil {
		return m.LastAccess
	}
	return 0
}

type Model_Node struct {
	Id      UUID   `protobuf:"varint,1,req,name=id,casttype=UUID" json:"id"`
	Address string `protobuf:"bytes,2,req,name=address" json:"address"`
	Seed    uint64 `protobuf:"varint,3,req,name=seed" json:"seed"`
}

func (m *Model_Node) Reset()         { *m = Model_Node{} }
func (m *Model_Node) String() string { return proto.CompactTextString(m) }
func (*Model_Node) ProtoMessage()    {}

func (m *Model_Node) GetId() UUID {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Model_Node) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *Model_Node) GetSeed() uint64 {
	if m != nil {
		return m.Seed
	}
	return 0
}

type Model_Persona struct {
	Id      UUID   `protobuf:"varint,1,req,name=id,casttype=UUID" json:"id"`
	Channel UUID   `protobuf:"varint,2,req,name=channel,casttype=UUID" json:"channel"`
	Account UUID   `protobuf:"varint,3,req,name=account,casttype=UUID" json:"account"`
	Name    string `protobuf:"bytes,4,req,name=name" json:"name"`
}

func (m *Model_Persona) Reset()         { *m = Model_Persona{} }
func (m *Model_Persona) String() string { return proto.CompactTextString(m) }
func (*Model_Persona) ProtoMessage()    {}

func (m *Model_Persona) GetId() UUID {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Model_Persona) GetChannel() UUID {
	if m != nil {
		return m.Channel
	}
	return 0
}

func (m *Model_Persona) GetAccount() UUID {
	if m != nil {
		return m.Account
	}
	return 0
}

func (m *Model_Persona) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type Model_Post struct {
	Id      UUID   `protobuf:"varint,1,req,name=id,casttype=UUID" json:"id"`
	Topic   UUID   `protobuf:"varint,2,req,name=topic,casttype=UUID" json:"topic"`
	Persona UUID   `protobuf:"varint,3,req,name=persona,casttype=UUID" json:"persona"`
	Attr    uint64 `protobuf:"varint,4,req,name=attr" json:"attr"`
	Text    string `protobuf:"bytes,5,req,name=text" json:"text"`
}

func (m *Model_Post) Reset()         { *m = Model_Post{} }
func (m *Model_Post) String() string { return proto.CompactTextString(m) }
func (*Model_Post) ProtoMessage()    {}

func (m *Model_Post) GetId() UUID {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Model_Post) GetTopic() UUID {
	if m != nil {
		return m.Topic
	}
	return 0
}

func (m *Model_Post) GetPersona() UUID {
	if m != nil {
		return m.Persona
	}
	return 0
}

func (m *Model_Post) GetAttr() uint64 {
	if m != nil {
		return m.Attr
	}
	return 0
}

func (m *Model_Post) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

type Model_Topic struct {
	Id   UUID   `protobuf:"varint,1,req,name=id,casttype=UUID" json:"id"`
	Name string `protobuf:"bytes,2,req,name=name" json:"name"`
}

func (m *Model_Topic) Reset()         { *m = Model_Topic{} }
func (m *Model_Topic) String() string { return proto.CompactTextString(m) }
func (*Model_Topic) ProtoMessage()    {}

func (m *Model_Topic) GetId() UUID {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Model_Topic) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type Model_Reaction struct {
	Id      UUID                `protobuf:"varint,1,req,name=id,casttype=UUID" json:"id"`
	Post    UUID                `protobuf:"varint,2,req,name=post,casttype=UUID" json:"post"`
	Type    Model_Reaction_Type `protobuf:"varint,3,req,name=type,enum=ChannerProto.Model_Reaction_Type" json:"type"`
	Persona UUID                `protobuf:"varint,4,req,name=persona,casttype=UUID" json:"persona"`
	Text    string              `protobuf:"bytes,5,req,name=text" json:"text"`
}

func (m *Model_Reaction) Reset()         { *m = Model_Reaction{} }
func (m *Model_Reaction) String() string { return proto.CompactTextString(m) }
func (*Model_Reaction) ProtoMessage()    {}

func (m *Model_Reaction) GetId() UUID {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Model_Reaction) GetPost() UUID {
	if m != nil {
		return m.Post
	}
	return 0
}

func (m *Model_Reaction) GetType() Model_Reaction_Type {
	if m != nil {
		return m.Type
	}
	return Model_Reaction_Unknown
}

func (m *Model_Reaction) GetPersona() UUID {
	if m != nil {
		return m.Persona
	}
	return 0
}

func (m *Model_Reaction) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

type Model_Service struct {
	Id      UUID `protobuf:"varint,1,req,name=id,casttype=UUID" json:"id"`
	Channel UUID `protobuf:"varint,2,req,name=channel,casttype=UUID" json:"channel"`
	Account UUID `protobuf:"varint,3,req,name=account,casttype=UUID" json:"account"`
}

func (m *Model_Service) Reset()         { *m = Model_Service{} }
func (m *Model_Service) String() string { return proto.CompactTextString(m) }
func (*Model_Service) ProtoMessage()    {}

func (m *Model_Service) GetId() UUID {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Model_Service) GetChannel() UUID {
	if m != nil {
		return m.Channel
	}
	return 0
}

func (m *Model_Service) GetAccount() UUID {
	if m != nil {
		return m.Account
	}
	return 0
}

// requests
type LoginRequest struct {
	Walltime   uint64  `protobuf:"varint,1,req,name=walltime" json:"walltime"`
	User       string  `protobuf:"bytes,2,req,name=user" json:"user"`
	Version    string  `protobuf:"bytes,3,req,name=version" json:"version"`
	Mail       string  `protobuf:"bytes,4,opt,name=mail" json:"mail"`
	Id         *string `protobuf:"bytes,5,opt,name=id" json:"id,omitempty"`
	Sign       *string `protobuf:"bytes,6,opt,name=sign" json:"sign,omitempty"`
	Pass       *string `protobuf:"bytes,7,opt,name=pass" json:"pass,omitempty"`
	DeviceId   *string `protobuf:"bytes,8,opt,name=device_id" json:"device_id,omitempty"`
	DeviceType *string `protobuf:"bytes,9,opt,name=device_type" json:"device_type,omitempty"`
	Rescue     *string `protobuf:"bytes,10,opt,name=rescue" json:"rescue,omitempty"`
}

func (m *LoginRequest) Reset()         { *m = LoginRequest{} }
func (m *LoginRequest) String() string { return proto.CompactTextString(m) }
func (*LoginRequest) ProtoMessage()    {}

func (m *LoginRequest) GetWalltime() uint64 {
	if m != nil {
		return m.Walltime
	}
	return 0
}

func (m *LoginRequest) GetUser() string {
	if m != nil {
		return m.User
	}
	return ""
}

func (m *LoginRequest) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *LoginRequest) GetMail() string {
	if m != nil {
		return m.Mail
	}
	return ""
}

func (m *LoginRequest) GetId() string {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return ""
}

func (m *LoginRequest) GetSign() string {
	if m != nil && m.Sign != nil {
		return *m.Sign
	}
	return ""
}

func (m *LoginRequest) GetPass() string {
	if m != nil && m.Pass != nil {
		return *m.Pass
	}
	return ""
}

func (m *LoginRequest) GetDeviceId() string {
	if m != nil && m.DeviceId != nil {
		return *m.DeviceId
	}
	return ""
}

func (m *LoginRequest) GetDeviceType() string {
	if m != nil && m.DeviceType != nil {
		return *m.DeviceType
	}
	return ""
}

func (m *LoginRequest) GetRescue() string {
	if m != nil && m.Rescue != nil {
		return *m.Rescue
	}
	return ""
}

type PostRequest struct {
	TopicId  UUID   `protobuf:"varint,1,req,name=topic_id,casttype=UUID" json:"topic_id"`
	Walltime uint64 `protobuf:"varint,2,req,name=walltime" json:"walltime"`
	Post     *Post  `protobuf:"bytes,3,req,name=post" json:"post,omitempty"`
}

func (m *PostRequest) Reset()         { *m = PostRequest{} }
func (m *PostRequest) String() string { return proto.CompactTextString(m) }
func (*PostRequest) ProtoMessage()    {}

func (m *PostRequest) GetTopicId() UUID {
	if m != nil {
		return m.TopicId
	}
	return 0
}

func (m *PostRequest) GetWalltime() uint64 {
	if m != nil {
		return m.Walltime
	}
	return 0
}

func (m *PostRequest) GetPost() *Post {
	if m != nil {
		return m.Post
	}
	return nil
}

type FetchRequest struct {
	StartAt *HLC   `protobuf:"bytes,1,req,name=start_at" json:"start_at,omitempty"`
	EndAt   *HLC   `protobuf:"bytes,2,opt,name=end_at" json:"end_at,omitempty"`
	Count   uint32 `protobuf:"varint,3,opt,name=count" json:"count"`
}

func (m *FetchRequest) Reset()         { *m = FetchRequest{} }
func (m *FetchRequest) String() string { return proto.CompactTextString(m) }
func (*FetchRequest) ProtoMessage()    {}

func (m *FetchRequest) GetStartAt() *HLC {
	if m != nil {
		return m.StartAt
	}
	return nil
}

func (m *FetchRequest) GetEndAt() *HLC {
	if m != nil {
		return m.EndAt
	}
	return nil
}

func (m *FetchRequest) GetCount() uint32 {
	if m != nil {
		return m.Count
	}
	return 0
}

type ReadRequest struct {
	TopicId    UUID `protobuf:"varint,1,req,name=topic_id,casttype=UUID" json:"topic_id"`
	ReadPostTs *HLC `protobuf:"bytes,2,req,name=read_post_ts" json:"read_post_ts,omitempty"`
}

func (m *ReadRequest) Reset()         { *m = ReadRequest{} }
func (m *ReadRequest) String() string { return proto.CompactTextString(m) }
func (*ReadRequest) ProtoMessage()    {}

func (m *ReadRequest) GetTopicId() UUID {
	if m != nil {
		return m.TopicId
	}
	return 0
}

func (m *ReadRequest) GetReadPostTs() *HLC {
	if m != nil {
		return m.ReadPostTs
	}
	return nil
}

type EnterTopicRequest struct {
	TopicId UUID `protobuf:"varint,1,req,name=topic_id,casttype=UUID" json:"topic_id"`
}

func (m *EnterTopicRequest) Reset()         { *m = EnterTopicRequest{} }
func (m *EnterTopicRequest) String() string { return proto.CompactTextString(m) }
func (*EnterTopicRequest) ProtoMessage()    {}

func (m *EnterTopicRequest) GetTopicId() UUID {
	if m != nil {
		return m.TopicId
	}
	return 0
}

type ExitTopicRequest struct {
	TopicId UUID `protobuf:"varint,1,req,name=topic_id,casttype=UUID" json:"topic_id"`
}

func (m *ExitTopicRequest) Reset()         { *m = ExitTopicRequest{} }
func (m *ExitTopicRequest) String() string { return proto.CompactTextString(m) }
func (*ExitTopicRequest) ProtoMessage()    {}

func (m *ExitTopicRequest) GetTopicId() UUID {
	if m != nil {
		return m.TopicId
	}
	return 0
}

type PingRequest struct {
	Walltime uint64 `protobuf:"varint,1,req,name=walltime" json:"walltime"`
}

func (m *PingRequest) Reset()         { *m = PingRequest{} }
func (m *PingRequest) String() string { return proto.CompactTextString(m) }
func (*PingRequest) ProtoMessage()    {}

func (m *PingRequest) GetWalltime() uint64 {
	if m != nil {
		return m.Walltime
	}
	return 0
}

type RescueRequest struct {
	Account  string `protobuf:"bytes,1,req,name=account" json:"account"`
	Sign     string `protobuf:"bytes,2,req,name=sign" json:"sign"`
	Walltime uint64 `protobuf:"varint,3,req,name=walltime" json:"walltime"`
}

func (m *RescueRequest) Reset()         { *m = RescueRequest{} }
func (m *RescueRequest) String() string { return proto.CompactTextString(m) }
func (*RescueRequest) ProtoMessage()    {}

func (m *RescueRequest) GetAccount() string {
	if m != nil {
		return m.Account
	}
	return ""
}

func (m *RescueRequest) GetSign() string {
	if m != nil {
		return m.Sign
	}
	return ""
}

func (m *RescueRequest) GetWalltime() uint64 {
	if m != nil {
		return m.Walltime
	}
	return 0
}

type ChannelCreateRequest struct {
	Name        string                 `protobuf:"bytes,1,req,name=name" json:"name"`
	Description string                 `protobuf:"bytes,2,opt,name=description" json:"description"`
	Style       string                 `protobuf:"bytes,3,opt,name=style" json:"style"`
	Options     *Model_Channel_Options `protobuf:"bytes,4,opt,name=options" json:"options,omitempty"`
}

func (m *ChannelCreateRequest) Reset()         { *m = ChannelCreateRequest{} }
func (m *ChannelCreateRequest) String() string { return proto.CompactTextString(m) }
func (*ChannelCreateRequest) ProtoMessage()    {}

func (m *ChannelCreateRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ChannelCreateRequest) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *ChannelCreateRequest) GetStyle() string {
	if m != nil {
		return m.Style
	}
	return ""
}

func (m *ChannelCreateRequest) GetOptions() *Model_Channel_Options {
	if m != nil {
		return m.Options
	}
	return nil
}

type ChannelListRequest struct {
	Category ChannelListRequest_Category `protobuf:"varint,1,opt,name=category,enum=ChannerProto.ChannelListRequest_Category" json:"category"`
	Limit    int32                       `protobuf:"varint,2,opt,name=limit" json:"limit"`
}

func (m *ChannelListRequest) Reset()         { *m = ChannelListRequest{} }
func (m *ChannelListRequest) String() string { return proto.CompactTextString(m) }
func (*ChannelListRequest) ProtoMessage()    {}

func (m *ChannelListRequest) GetCategory() ChannelListRequest_Category {
	if m != nil {
		return m.Category
	}
	return ChannelListRequest_None
}

func (m *ChannelListRequest) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

// response
type LoginResponse struct {
	Id     string  `protobuf:"bytes,1,req,name=id" json:"id"`
	Secret string  `protobuf:"bytes,2,req,name=secret" json:"secret"`
	Pass   *string `protobuf:"bytes,3,opt,name=pass" json:"pass,omitempty"`
	Mail   *string `protobuf:"bytes,4,opt,name=mail" json:"mail,omitempty"`
	User   *string `protobuf:"bytes,5,opt,name=user" json:"user,omitempty"`
}

func (m *LoginResponse) Reset()         { *m = LoginResponse{} }
func (m *LoginResponse) String() string { return proto.CompactTextString(m) }
func (*LoginResponse) ProtoMessage()    {}

func (m *LoginResponse) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *LoginResponse) GetSecret() string {
	if m != nil {
		return m.Secret
	}
	return ""
}

func (m *LoginResponse) GetPass() string {
	if m != nil && m.Pass != nil {
		return *m.Pass
	}
	return ""
}

func (m *LoginResponse) GetMail() string {
	if m != nil && m.Mail != nil {
		return *m.Mail
	}
	return ""
}

func (m *LoginResponse) GetUser() string {
	if m != nil && m.User != nil {
		return *m.User
	}
	return ""
}

type PostResponse struct {
	PostedAt *HLC `protobuf:"bytes,1,req,name=posted_at" json:"posted_at,omitempty"`
}

func (m *PostResponse) Reset()         { *m = PostResponse{} }
func (m *PostResponse) String() string { return proto.CompactTextString(m) }
func (*PostResponse) ProtoMessage()    {}

func (m *PostResponse) GetPostedAt() *HLC {
	if m != nil {
		return m.PostedAt
	}
	return nil
}

type FetchResponse struct {
	Posts []*Post `protobuf:"bytes,1,rep,name=posts" json:"posts,omitempty"`
}

func (m *FetchResponse) Reset()         { *m = FetchResponse{} }
func (m *FetchResponse) String() string { return proto.CompactTextString(m) }
func (*FetchResponse) ProtoMessage()    {}

func (m *FetchResponse) GetPosts() []*Post {
	if m != nil {
		return m.Posts
	}
	return nil
}

type ReadResponse struct {
}

func (m *ReadResponse) Reset()         { *m = ReadResponse{} }
func (m *ReadResponse) String() string { return proto.CompactTextString(m) }
func (*ReadResponse) ProtoMessage()    {}

type EnterTopicResponse struct {
}

func (m *EnterTopicResponse) Reset()         { *m = EnterTopicResponse{} }
func (m *EnterTopicResponse) String() string { return proto.CompactTextString(m) }
func (*EnterTopicResponse) ProtoMessage()    {}

type ExitTopicResponse struct {
}

func (m *ExitTopicResponse) Reset()         { *m = ExitTopicResponse{} }
func (m *ExitTopicResponse) String() string { return proto.CompactTextString(m) }
func (*ExitTopicResponse) ProtoMessage()    {}

type PingResponse struct {
	Walltime uint64 `protobuf:"varint,1,req,name=walltime" json:"walltime"`
}

func (m *PingResponse) Reset()         { *m = PingResponse{} }
func (m *PingResponse) String() string { return proto.CompactTextString(m) }
func (*PingResponse) ProtoMessage()    {}

func (m *PingResponse) GetWalltime() uint64 {
	if m != nil {
		return m.Walltime
	}
	return 0
}

type RescueResponse struct {
	Url    string `protobuf:"bytes,1,req,name=url" json:"url"`
	Remain int64  `protobuf:"varint,2,req,name=remain" json:"remain"`
}

func (m *RescueResponse) Reset()         { *m = RescueResponse{} }
func (m *RescueResponse) String() string { return proto.CompactTextString(m) }
func (*RescueResponse) ProtoMessage()    {}

func (m *RescueResponse) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *RescueResponse) GetRemain() int64 {
	if m != nil {
		return m.Remain
	}
	return 0
}

type ChannelCreateResponse struct {
	Channel *Model_Channel `protobuf:"bytes,1,req,name=channel" json:"channel,omitempty"`
}

func (m *ChannelCreateResponse) Reset()         { *m = ChannelCreateResponse{} }
func (m *ChannelCreateResponse) String() string { return proto.CompactTextString(m) }
func (*ChannelCreateResponse) ProtoMessage()    {}

func (m *ChannelCreateResponse) GetChannel() *Model_Channel {
	if m != nil {
		return m.Channel
	}
	return nil
}

type ChannelListResponse struct {
	List []*Model_Channel `protobuf:"bytes,1,rep,name=list" json:"list,omitempty"`
}

func (m *ChannelListResponse) Reset()         { *m = ChannelListResponse{} }
func (m *ChannelListResponse) String() string { return proto.CompactTextString(m) }
func (*ChannelListResponse) ProtoMessage()    {}

func (m *ChannelListResponse) GetList() []*Model_Channel {
	if m != nil {
		return m.List
	}
	return nil
}

// response error
type Error struct {
	Type        Error_Type `protobuf:"varint,1,req,name=type,enum=ChannerProto.Error_Type" json:"type"`
	Explanation string     `protobuf:"bytes,2,opt,name=explanation" json:"explanation"`
}

func (m *Error) Reset()         { *m = Error{} }
func (m *Error) String() string { return proto.CompactTextString(m) }
func (*Error) ProtoMessage()    {}

func (m *Error) GetType() Error_Type {
	if m != nil {
		return m.Type
	}
	return Error_Unknown
}

func (m *Error) GetExplanation() string {
	if m != nil {
		return m.Explanation
	}
	return ""
}

// total payload
type Payload struct {
	Type                  Payload_Type           `protobuf:"varint,1,req,name=type,enum=ChannerProto.Payload_Type" json:"type"`
	Msgid                 uint32                 `protobuf:"varint,2,opt,name=msgid" json:"msgid"`
	LoginRequest          *LoginRequest          `protobuf:"bytes,3,opt,name=login_request" json:"login_request,omitempty"`
	PostRequest           *PostRequest           `protobuf:"bytes,4,opt,name=post_request" json:"post_request,omitempty"`
	FetchRequest          *FetchRequest          `protobuf:"bytes,5,opt,name=fetch_request" json:"fetch_request,omitempty"`
	ReadRequest           *ReadRequest           `protobuf:"bytes,6,opt,name=read_request" json:"read_request,omitempty"`
	EnterTopicRequest     *EnterTopicRequest     `protobuf:"bytes,7,opt,name=enter_topic_request" json:"enter_topic_request,omitempty"`
	ExitTopicRequest      *ExitTopicRequest      `protobuf:"bytes,8,opt,name=exit_topic_request" json:"exit_topic_request,omitempty"`
	PingRequest           *PingRequest           `protobuf:"bytes,9,opt,name=ping_request" json:"ping_request,omitempty"`
	RescueRequest         *RescueRequest         `protobuf:"bytes,10,opt,name=rescue_request" json:"rescue_request,omitempty"`
	ChannelCreateRequest  *ChannelCreateRequest  `protobuf:"bytes,11,opt,name=channel_create_request" json:"channel_create_request,omitempty"`
	ChannelListRequest    *ChannelListRequest    `protobuf:"bytes,12,opt,name=channel_list_request" json:"channel_list_request,omitempty"`
	Error                 *Error                 `protobuf:"bytes,30,opt,name=error" json:"error,omitempty"`
	LoginResponse         *LoginResponse         `protobuf:"bytes,31,opt,name=login_response" json:"login_response,omitempty"`
	PostResponse          *PostResponse          `protobuf:"bytes,32,opt,name=post_response" json:"post_response,omitempty"`
	FetchResponse         *FetchResponse         `protobuf:"bytes,33,opt,name=fetch_response" json:"fetch_response,omitempty"`
	ReadResponse          *ReadResponse          `protobuf:"bytes,34,opt,name=read_response" json:"read_response,omitempty"`
	EnterTopicResponse    *EnterTopicResponse    `protobuf:"bytes,35,opt,name=enter_topic_response" json:"enter_topic_response,omitempty"`
	ExitTopicResponse     *ExitTopicResponse     `protobuf:"bytes,36,opt,name=exit_topic_response" json:"exit_topic_response,omitempty"`
	PingResponse          *PingResponse          `protobuf:"bytes,37,opt,name=ping_response" json:"ping_response,omitempty"`
	RescueResponse        *RescueResponse        `protobuf:"bytes,38,opt,name=rescue_response" json:"rescue_response,omitempty"`
	ChannelCreateResponse *ChannelCreateResponse `protobuf:"bytes,39,opt,name=channel_create_response" json:"channel_create_response,omitempty"`
	ChannelListResponse   *ChannelListResponse   `protobuf:"bytes,40,opt,name=channel_list_response" json:"channel_list_response,omitempty"`
	PostNotify            *Post                  `protobuf:"bytes,61,opt,name=post_notify" json:"post_notify,omitempty"`
}

func (m *Payload) Reset()         { *m = Payload{} }
func (m *Payload) String() string { return proto.CompactTextString(m) }
func (*Payload) ProtoMessage()    {}

func (m *Payload) GetType() Payload_Type {
	if m != nil {
		return m.Type
	}
	return Payload_Unknown
}

func (m *Payload) GetMsgid() uint32 {
	if m != nil {
		return m.Msgid
	}
	return 0
}

func (m *Payload) GetLoginRequest() *LoginRequest {
	if m != nil {
		return m.LoginRequest
	}
	return nil
}

func (m *Payload) GetPostRequest() *PostRequest {
	if m != nil {
		return m.PostRequest
	}
	return nil
}

func (m *Payload) GetFetchRequest() *FetchRequest {
	if m != nil {
		return m.FetchRequest
	}
	return nil
}

func (m *Payload) GetReadRequest() *ReadRequest {
	if m != nil {
		return m.ReadRequest
	}
	return nil
}

func (m *Payload) GetEnterTopicRequest() *EnterTopicRequest {
	if m != nil {
		return m.EnterTopicRequest
	}
	return nil
}

func (m *Payload) GetExitTopicRequest() *ExitTopicRequest {
	if m != nil {
		return m.ExitTopicRequest
	}
	return nil
}

func (m *Payload) GetPingRequest() *PingRequest {
	if m != nil {
		return m.PingRequest
	}
	return nil
}

func (m *Payload) GetRescueRequest() *RescueRequest {
	if m != nil {
		return m.RescueRequest
	}
	return nil
}

func (m *Payload) GetChannelCreateRequest() *ChannelCreateRequest {
	if m != nil {
		return m.ChannelCreateRequest
	}
	return nil
}

func (m *Payload) GetChannelListRequest() *ChannelListRequest {
	if m != nil {
		return m.ChannelListRequest
	}
	return nil
}

func (m *Payload) GetError() *Error {
	if m != nil {
		return m.Error
	}
	return nil
}

func (m *Payload) GetLoginResponse() *LoginResponse {
	if m != nil {
		return m.LoginResponse
	}
	return nil
}

func (m *Payload) GetPostResponse() *PostResponse {
	if m != nil {
		return m.PostResponse
	}
	return nil
}

func (m *Payload) GetFetchResponse() *FetchResponse {
	if m != nil {
		return m.FetchResponse
	}
	return nil
}

func (m *Payload) GetReadResponse() *ReadResponse {
	if m != nil {
		return m.ReadResponse
	}
	return nil
}

func (m *Payload) GetEnterTopicResponse() *EnterTopicResponse {
	if m != nil {
		return m.EnterTopicResponse
	}
	return nil
}

func (m *Payload) GetExitTopicResponse() *ExitTopicResponse {
	if m != nil {
		return m.ExitTopicResponse
	}
	return nil
}

func (m *Payload) GetPingResponse() *PingResponse {
	if m != nil {
		return m.PingResponse
	}
	return nil
}

func (m *Payload) GetRescueResponse() *RescueResponse {
	if m != nil {
		return m.RescueResponse
	}
	return nil
}

func (m *Payload) GetChannelCreateResponse() *ChannelCreateResponse {
	if m != nil {
		return m.ChannelCreateResponse
	}
	return nil
}

func (m *Payload) GetChannelListResponse() *ChannelListResponse {
	if m != nil {
		return m.ChannelListResponse
	}
	return nil
}

func (m *Payload) GetPostNotify() *Post {
	if m != nil {
		return m.PostNotify
	}
	return nil
}

func init() {
	proto.RegisterType((*HLC)(nil), "ChannerProto.HLC")
	proto.RegisterType((*Post)(nil), "ChannerProto.Post")
	proto.RegisterType((*Post_Options)(nil), "ChannerProto.Post.Options")
	proto.RegisterType((*Topic)(nil), "ChannerProto.Topic")
	proto.RegisterType((*Model)(nil), "ChannerProto.Model")
	proto.RegisterType((*Model_Account)(nil), "ChannerProto.Model.Account")
	proto.RegisterType((*Model_Rescue)(nil), "ChannerProto.Model.Rescue")
	proto.RegisterType((*Model_Channel)(nil), "ChannerProto.Model.Channel")
	proto.RegisterType((*Model_Channel_Options)(nil), "ChannerProto.Model.Channel.Options")
	proto.RegisterType((*Model_Device)(nil), "ChannerProto.Model.Device")
	proto.RegisterType((*Model_Node)(nil), "ChannerProto.Model.Node")
	proto.RegisterType((*Model_Persona)(nil), "ChannerProto.Model.Persona")
	proto.RegisterType((*Model_Post)(nil), "ChannerProto.Model.Post")
	proto.RegisterType((*Model_Topic)(nil), "ChannerProto.Model.Topic")
	proto.RegisterType((*Model_Reaction)(nil), "ChannerProto.Model.Reaction")
	proto.RegisterType((*Model_Service)(nil), "ChannerProto.Model.Service")
	proto.RegisterType((*LoginRequest)(nil), "ChannerProto.LoginRequest")
	proto.RegisterType((*PostRequest)(nil), "ChannerProto.PostRequest")
	proto.RegisterType((*FetchRequest)(nil), "ChannerProto.FetchRequest")
	proto.RegisterType((*ReadRequest)(nil), "ChannerProto.ReadRequest")
	proto.RegisterType((*EnterTopicRequest)(nil), "ChannerProto.EnterTopicRequest")
	proto.RegisterType((*ExitTopicRequest)(nil), "ChannerProto.ExitTopicRequest")
	proto.RegisterType((*PingRequest)(nil), "ChannerProto.PingRequest")
	proto.RegisterType((*RescueRequest)(nil), "ChannerProto.RescueRequest")
	proto.RegisterType((*ChannelCreateRequest)(nil), "ChannerProto.ChannelCreateRequest")
	proto.RegisterType((*ChannelListRequest)(nil), "ChannerProto.ChannelListRequest")
	proto.RegisterType((*LoginResponse)(nil), "ChannerProto.LoginResponse")
	proto.RegisterType((*PostResponse)(nil), "ChannerProto.PostResponse")
	proto.RegisterType((*FetchResponse)(nil), "ChannerProto.FetchResponse")
	proto.RegisterType((*ReadResponse)(nil), "ChannerProto.ReadResponse")
	proto.RegisterType((*EnterTopicResponse)(nil), "ChannerProto.EnterTopicResponse")
	proto.RegisterType((*ExitTopicResponse)(nil), "ChannerProto.ExitTopicResponse")
	proto.RegisterType((*PingResponse)(nil), "ChannerProto.PingResponse")
	proto.RegisterType((*RescueResponse)(nil), "ChannerProto.RescueResponse")
	proto.RegisterType((*ChannelCreateResponse)(nil), "ChannerProto.ChannelCreateResponse")
	proto.RegisterType((*ChannelListResponse)(nil), "ChannerProto.ChannelListResponse")
	proto.RegisterType((*Error)(nil), "ChannerProto.Error")
	proto.RegisterType((*Payload)(nil), "ChannerProto.Payload")
	proto.RegisterEnum("ChannerProto.Model_Account_Type", Model_Account_Type_name, Model_Account_Type_value)
	proto.RegisterEnum("ChannerProto.Model_Account_Status", Model_Account_Status_name, Model_Account_Status_value)
	proto.RegisterEnum("ChannerProto.Model_Channel_IdentityLevel", Model_Channel_IdentityLevel_name, Model_Channel_IdentityLevel_value)
	proto.RegisterEnum("ChannerProto.Model_Channel_TopicDisplayStyle", Model_Channel_TopicDisplayStyle_name, Model_Channel_TopicDisplayStyle_value)
	proto.RegisterEnum("ChannerProto.Model_Reaction_Type", Model_Reaction_Type_name, Model_Reaction_Type_value)
	proto.RegisterEnum("ChannerProto.ChannelListRequest_Category", ChannelListRequest_Category_name, ChannelListRequest_Category_value)
	proto.RegisterEnum("ChannerProto.Error_Type", Error_Type_name, Error_Type_value)
	proto.RegisterEnum("ChannerProto.Payload_Type", Payload_Type_name, Payload_Type_value)
}
func (m *HLC) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *HLC) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	data[i] = 0x8
	i++
	i = encodeVarintChanner(data, i, uint64(m.Walltime))
	data[i] = 0x10
	i++
	i = encodeVarintChanner(data, i, uint64(m.LogicalTs))
	return i, nil
}

func (m *Post) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *Post) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	data[i] = 0xa
	i++
	i = encodeVarintChanner(data, i, uint64(len(m.Text)))
	i += copy(data[i:], m.Text)
	if m.Ts != nil {
		data[i] = 0x12
		i++
		i = encodeVarintChanner(data, i, uint64(m.Ts.Size()))
		n1, err := m.Ts.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.Options != nil {
		data[i] = 0x1a
		i++
		i = encodeVarintChanner(data, i, uint64(m.Options.Size()))
		n2, err := m.Options.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	return i, nil
}

func (m *Post_Options) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *Post_Options) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Refers) > 0 {
		for _, msg := range m.Refers {
			data[i] = 0xa
			i++
			i = encodeVarintChanner(data, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(data[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	data[i] = 0x10
	i++
	if m.FetchUrl {
		data[i] = 1
	} else {
		data[i] = 0
	}
	i++
	return i, nil
}

func (m *Topic) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *Topic) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	data[i] = 0xa
	i++
	i = encodeVarintChanner(data, i, uint64(len(m.Name)))
	i += copy(data[i:], m.Name)
	if m.LastReadTs == nil {
		return 0, github_com_gogo_protobuf_proto.NewRequiredNotSetError("last_read_ts")
	} else {
		data[i] = 0x12
		i++
		i = encodeVarintChanner(data, i, uint64(m.LastReadTs.Size()))
		n3, err := m.LastReadTs.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	if len(m.RecentPosts) > 0 {
		for _, msg := range m.RecentPosts {
			data[i] = 0x1a
			i++
			i = encodeVarintChanner(data, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(data[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *Model) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *Model) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *Model_Account) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *Model_Account) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	data[i] = 0x8
	i++
	i = encodeVarintChanner(data, i, uint64(m.Id))
	data[i] = 0x12
	i++
	i = encodeVarintChanner(data, i, uint64(len(m.User)))
	i += copy(data[i:], m.User)
	data[i] = 0x18
	i++
	i = encodeVarintChanner(data, i, uint64(m.Type))
	data[i] = 0x22
	i++
	i = encodeVarintChanner(data, i, uint64(len(m.Secret)))
	i += copy(data[i:], m.Secret)
	data[i] = 0x2a
	i++
	i = encodeVarintChanner(data, i, uint64(len(m.Pass)))
	i += copy(data[i:], m.Pass)
	data[i] = 0x32
	i++
	i = encodeVarintChanner(data, i, uint64(len(m.Mail)))
	i += copy(data[i:], m.Mail)
	data[i] = 0x38
	i++
	i = encodeVarintChanner(data, i, uint64(m.Status))
	return i, nil
}

func (m *Model_Rescue) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *Model_Rescue) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != nil {
		data[i] = 0xa
		i++
		i = encodeVarintChanner(data, i, uint64(len(m.Id)))
		i += copy(data[i:], m.Id)
	}
	data[i] = 0x12
	i++
	i = encodeVarintChanner(data, i, uint64(len(m.Account)))
	i += copy(data[i:], m.Account)
	data[i] = 0x18
	i++
	i = encodeVarintChanner(data, i, uint64(m.ValidDate))
	return i, nil
}

func (m *Model_Channel) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *Model_Channel) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	data[i] = 0x8
	i++
	i = encodeVarintChanner(data, i, uint64(m.Id))
	data[i] = 0x12
	i++
	i = encodeVarintChanner(data, i, uint64(len(m.Name)))
	i += copy(data[i:], m.Name)
	data[i] = 0x1a
	i++
	i = encodeVarintChanner(data, i, uint64(len(m.Description)))
	i += copy(data[i:], m.Description)
	data[i] = 0x22
	i++
	i = encodeVarintChanner(data, i, uint64(len(m.Style)))
	i += copy(data[i:], m.Style)
	data[i] = 0x28
	i++
	i = encodeVarintChanner(data, i, uint64(m.Established))
	if m.Options != nil {
		data[i] = 0x32
		i++
		i = encodeVarintChanner(data, i, uint64(len(m.Options)))
		i += copy(data[i:], m.Options)
	}
	return i, nil
}

func (m *Model_Channel_Options) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *Model_Channel_Options) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	data[i] = 0x8
	i++
	i = encodeVarintChanner(data, i, uint64(m.Identity))
	data[i] = 0x10
	i++
	i = encodeVarintChanner(data, i, uint64(m.TopicDisplayStyle))
	data[i] = 0x18
	i++
	i = encodeVarintChanner(data, i, uint64(m.TopicPostLimit))
	data[i] = 0x22
	i++
	i = encodeVarintChanner(data, i, uint64(len(m.AnonymousName)))
	i += copy(data[i:], m.AnonymousName)
	return i, nil
}

func (m *Model_Device) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *Model_Device) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	data[i] = 0xa
	i++
	i = encodeVarintChanner(data, i, uint64(len(m.Id)))
	i += copy(data[i:], m.Id)
	data[i] = 0x12
	i++
	i = encodeVarintChanner(data, i, uint64(len(m.Type)))
	i += copy(data[i:], m.Type)
	data[i] = 0x18
	i++
	i = encodeVarintChanner(data, i, uint64(m.Account))
	data[i] = 0x22
	i++
	i = encodeVarintChanner(data, i, uint64(len(m.LastFrom)))
	i += copy(data[i:], m.LastFrom)
	data[i] = 0x28
	i++
	i = encodeVarintChanner(data, i, uint64(m.LastAccess))
	return i, nil
}

func (m *Model_Node) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *Model_Node) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	data[i] = 0x8
	i++
	i = encodeVarintChanner(data, i, uint64(m.Id))
	data[i] = 0x12
	i++
	i = encodeVarintChanner(data, i, uint64(len(m.Address)))
	i += copy(data[i:], m.Address)
	data[i] = 0x18
	i++
	i = encodeVarintChanner(data, i, uint64(m.Seed))
	return i, nil
}

func (m *Model_Persona) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *Model_Persona) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	data[i] = 0x8
	i++
	i = encodeVarintChanner(data, i, uint64(m.Id))
	data[i] = 0x10
	i++
	i = encodeVarintChanner(data, i, uint64(m.Channel))
	data[i] = 0x18
	i++
	i = encodeVarintChanner(data, i, uint64(m.Account))
	data[i] = 0x22
	i++
	i = encodeVarintChanner(data, i, uint64(len(m.Name)))
	i += copy(data[i:], m.Name)
	return i, nil
}

func (m *Model_Post) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *Model_Post) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	data[i] = 0x8
	i++
	i = encodeVarintChanner(data, i, uint64(m.Id))
	data[i] = 0x10
	i++
	i = encodeVarintChanner(data, i, uint64(m.Topic))
	data[i] = 0x18
	i++
	i = encodeVarintChanner(data, i, uint64(m.Persona))
	data[i] = 0x20
	i++
	i = encodeVarintChanner(data, i, uint64(m.Attr))
	data[i] = 0x2a
	i++
	i = encodeVarintChanner(data, i, uint64(len(m.Text)))
	i += copy(data[i:], m.Text)
	return i, nil
}

func (m *Model_Topic) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *Model_Topic) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	data[i] = 0x8
	i++
	i = encodeVarintChanner(data, i, uint64(m.Id))
	data[i] = 0x12
	i++
	i = encodeVarintChanner(data, i, uint64(len(m.Name)))
	i += copy(data[i:], m.Name)
	return i, nil
}

func (m *Model_Reaction) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *Model_Reaction) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	data[i] = 0x8
	i++
	i = encodeVarintChanner(data, i, uint64(m.Id))
	data[i] = 0x10
	i++
	i = encodeVarintChanner(data, i, uint64(m.Post))
	data[i] = 0x18
	i++
	i = encodeVarintChanner(data, i, uint64(m.Type))
	data[i] = 0x20
	i++
	i = encodeVarintChanner(data, i, uint64(m.Persona))
	data[i] = 0x2a
	i++
	i = encodeVarintChanner(data, i, uint64(len(m.Text)))
	i += copy(data[i:], m.Text)
	return i, nil
}

func (m *Model_Service) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *Model_Service) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	data[i] = 0x8
	i++
	i = encodeVarintChanner(data, i, uint64(m.Id))
	data[i] = 0x10
	i++
	i = encodeVarintChanner(data, i, uint64(m.Channel))
	data[i] = 0x18
	i++
	i = encodeVarintChanner(data, i, uint64(m.Account))
	return i, nil
}

func (m *LoginRequest) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *LoginRequest) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	data[i] = 0x8
	i++
	i = encodeVarintChanner(data, i, uint64(m.Walltime))
	data[i] = 0x12
	i++
	i = encodeVarintChanner(data, i, uint64(len(m.User)))
	i += copy(data[i:], m.User)
	data[i] = 0x1a
	i++
	i = encodeVarintChanner(data, i, uint64(len(m.Version)))
	i += copy(data[i:], m.Version)
	data[i] = 0x22
	i++
	i = encodeVarintChanner(data, i, uint64(len(m.Mail)))
	i += copy(data[i:], m.Mail)
	if m.Id != nil {
		data[i] = 0x2a
		i++
		i = encodeVarintChanner(data, i, uint64(len(*m.Id)))
		i += copy(data[i:], *m.Id)
	}
	if m.Sign != nil {
		data[i] = 0x32
		i++
		i = encodeVarintChanner(data, i, uint64(len(*m.Sign)))
		i += copy(data[i:], *m.Sign)
	}
	if m.Pass != nil {
		data[i] = 0x3a
		i++
		i = encodeVarintChanner(data, i, uint64(len(*m.Pass)))
		i += copy(data[i:], *m.Pass)
	}
	if m.DeviceId != nil {
		data[i] = 0x42
		i++
		i = encodeVarintChanner(data, i, uint64(len(*m.DeviceId)))
		i += copy(data[i:], *m.DeviceId)
	}
	if m.DeviceType != nil {
		data[i] = 0x4a
		i++
		i = encodeVarintChanner(data, i, uint64(len(*m.DeviceType)))
		i += copy(data[i:], *m.DeviceType)
	}
	if m.Rescue != nil {
		data[i] = 0x52
		i++
		i = encodeVarintChanner(data, i, uint64(len(*m.Rescue)))
		i += copy(data[i:], *m.Rescue)
	}
	return i, nil
}

func (m *PostRequest) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *PostRequest) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	data[i] = 0x8
	i++
	i = encodeVarintChanner(data, i, uint64(m.TopicId))
	data[i] = 0x10
	i++
	i = encodeVarintChanner(data, i, uint64(m.Walltime))
	if m.Post == nil {
		return 0, github_com_gogo_protobuf_proto.NewRequiredNotSetError("post")
	} else {
		data[i] = 0x1a
		i++
		i = encodeVarintChanner(data, i, uint64(m.Post.Size()))
		n4, err := m.Post.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	return i, nil
}

func (m *FetchRequest) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *FetchRequest) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.StartAt == nil {
		return 0, github_com_gogo_protobuf_proto.NewRequiredNotSetError("start_at")
	} else {
		data[i] = 0xa
		i++
		i = encodeVarintChanner(data, i, uint64(m.StartAt.Size()))
		n5, err := m.StartAt.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	if m.EndAt != nil {
		data[i] = 0x12
		i++
		i = encodeVarintChanner(data, i, uint64(m.EndAt.Size()))
		n6, err := m.EndAt.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	data[i] = 0x18
	i++
	i = encodeVarintChanner(data, i, uint64(m.Count))
	return i, nil
}

func (m *ReadRequest) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *ReadRequest) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	data[i] = 0x8
	i++
	i = encodeVarintChanner(data, i, uint64(m.TopicId))
	if m.ReadPostTs == nil {
		return 0, github_com_gogo_protobuf_proto.NewRequiredNotSetError("read_post_ts")
	} else {
		data[i] = 0x12
		i++
		i = encodeVarintChanner(data, i, uint64(m.ReadPostTs.Size()))
		n7, err := m.ReadPostTs.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n7
	}
	return i, nil
}

func (m *EnterTopicRequest) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *EnterTopicRequest) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	data[i] = 0x8
	i++
	i = encodeVarintChanner(data, i, uint64(m.TopicId))
	return i, nil
}

func (m *ExitTopicRequest) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *ExitTopicRequest) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	data[i] = 0x8
	i++
	i = encodeVarintChanner(data, i, uint64(m.TopicId))
	return i, nil
}

func (m *PingRequest) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *PingRequest) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	data[i] = 0x8
	i++
	i = encodeVarintChanner(data, i, uint64(m.Walltime))
	return i, nil
}

func (m *RescueRequest) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *RescueRequest) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	data[i] = 0xa
	i++
	i = encodeVarintChanner(data, i, uint64(len(m.Account)))
	i += copy(data[i:], m.Account)
	data[i] = 0x12
	i++
	i = encodeVarintChanner(data, i, uint64(len(m.Sign)))
	i += copy(data[i:], m.Sign)
	data[i] = 0x18
	i++
	i = encodeVarintChanner(data, i, uint64(m.Walltime))
	return i, nil
}

func (m *ChannelCreateRequest) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *ChannelCreateRequest) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	data[i] = 0xa
	i++
	i = encodeVarintChanner(data, i, uint64(len(m.Name)))
	i += copy(data[i:], m.Name)
	data[i] = 0x12
	i++
	i = encodeVarintChanner(data, i, uint64(len(m.Description)))
	i += copy(data[i:], m.Description)
	data[i] = 0x1a
	i++
	i = encodeVarintChanner(data, i, uint64(len(m.Style)))
	i += copy(data[i:], m.Style)
	if m.Options != nil {
		data[i] = 0x22
		i++
		i = encodeVarintChanner(data, i, uint64(m.Options.Size()))
		n8, err := m.Options.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n8
	}
	return i, nil
}

func (m *ChannelListRequest) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *ChannelListRequest) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	data[i] = 0x8
	i++
	i = encodeVarintChanner(data, i, uint64(m.Category))
	data[i] = 0x10
	i++
	i = encodeVarintChanner(data, i, uint64(m.Limit))
	return i, nil
}

func (m *LoginResponse) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *LoginResponse) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	data[i] = 0xa
	i++
	i = encodeVarintChanner(data, i, uint64(len(m.Id)))
	i += copy(data[i:], m.Id)
	data[i] = 0x12
	i++
	i = encodeVarintChanner(data, i, uint64(len(m.Secret)))
	i += copy(data[i:], m.Secret)
	if m.Pass != nil {
		data[i] = 0x1a
		i++
		i = encodeVarintChanner(data, i, uint64(len(*m.Pass)))
		i += copy(data[i:], *m.Pass)
	}
	if m.Mail != nil {
		data[i] = 0x22
		i++
		i = encodeVarintChanner(data, i, uint64(len(*m.Mail)))
		i += copy(data[i:], *m.Mail)
	}
	if m.User != nil {
		data[i] = 0x2a
		i++
		i = encodeVarintChanner(data, i, uint64(len(*m.User)))
		i += copy(data[i:], *m.User)
	}
	return i, nil
}

func (m *PostResponse) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *PostResponse) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.PostedAt == nil {
		return 0, github_com_gogo_protobuf_proto.NewRequiredNotSetError("posted_at")
	} else {
		data[i] = 0xa
		i++
		i = encodeVarintChanner(data, i, uint64(m.PostedAt.Size()))
		n9, err := m.PostedAt.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n9
	}
	return i, nil
}

func (m *FetchResponse) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *FetchResponse) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Posts) > 0 {
		for _, msg := range m.Posts {
			data[i] = 0xa
			i++
			i = encodeVarintChanner(data, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(data[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *ReadResponse) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *ReadResponse) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *EnterTopicResponse) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *EnterTopicResponse) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *ExitTopicResponse) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *ExitTopicResponse) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *PingResponse) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *PingResponse) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	data[i] = 0x8
	i++
	i = encodeVarintChanner(data, i, uint64(m.Walltime))
	return i, nil
}

func (m *RescueResponse) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *RescueResponse) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	data[i] = 0xa
	i++
	i = encodeVarintChanner(data, i, uint64(len(m.Url)))
	i += copy(data[i:], m.Url)
	data[i] = 0x10
	i++
	i = encodeVarintChanner(data, i, uint64(m.Remain))
	return i, nil
}

func (m *ChannelCreateResponse) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *ChannelCreateResponse) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Channel == nil {
		return 0, github_com_gogo_protobuf_proto.NewRequiredNotSetError("channel")
	} else {
		data[i] = 0xa
		i++
		i = encodeVarintChanner(data, i, uint64(m.Channel.Size()))
		n10, err := m.Channel.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n10
	}
	return i, nil
}

func (m *ChannelListResponse) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *ChannelListResponse) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.List) > 0 {
		for _, msg := range m.List {
			data[i] = 0xa
			i++
			i = encodeVarintChanner(data, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(data[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *Error) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *Error) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	data[i] = 0x8
	i++
	i = encodeVarintChanner(data, i, uint64(m.Type))
	data[i] = 0x12
	i++
	i = encodeVarintChanner(data, i, uint64(len(m.Explanation)))
	i += copy(data[i:], m.Explanation)
	return i, nil
}

func (m *Payload) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *Payload) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	data[i] = 0x8
	i++
	i = encodeVarintChanner(data, i, uint64(m.Type))
	data[i] = 0x10
	i++
	i = encodeVarintChanner(data, i, uint64(m.Msgid))
	if m.LoginRequest != nil {
		data[i] = 0x1a
		i++
		i = encodeVarintChanner(data, i, uint64(m.LoginRequest.Size()))
		n11, err := m.LoginRequest.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n11
	}
	if m.PostRequest != nil {
		data[i] = 0x22
		i++
		i = encodeVarintChanner(data, i, uint64(m.PostRequest.Size()))
		n12, err := m.PostRequest.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n12
	}
	if m.FetchRequest != nil {
		data[i] = 0x2a
		i++
		i = encodeVarintChanner(data, i, uint64(m.FetchRequest.Size()))
		n13, err := m.FetchRequest.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n13
	}
	if m.ReadRequest != nil {
		data[i] = 0x32
		i++
		i = encodeVarintChanner(data, i, uint64(m.ReadRequest.Size()))
		n14, err := m.ReadRequest.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n14
	}
	if m.EnterTopicRequest != nil {
		data[i] = 0x3a
		i++
		i = encodeVarintChanner(data, i, uint64(m.EnterTopicRequest.Size()))
		n15, err := m.EnterTopicRequest.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n15
	}
	if m.ExitTopicRequest != nil {
		data[i] = 0x42
		i++
		i = encodeVarintChanner(data, i, uint64(m.ExitTopicRequest.Size()))
		n16, err := m.ExitTopicRequest.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n16
	}
	if m.PingRequest != nil {
		data[i] = 0x4a
		i++
		i = encodeVarintChanner(data, i, uint64(m.PingRequest.Size()))
		n17, err := m.PingRequest.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n17
	}
	if m.RescueRequest != nil {
		data[i] = 0x52
		i++
		i = encodeVarintChanner(data, i, uint64(m.RescueRequest.Size()))
		n18, err := m.RescueRequest.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n18
	}
	if m.ChannelCreateRequest != nil {
		data[i] = 0x5a
		i++
		i = encodeVarintChanner(data, i, uint64(m.ChannelCreateRequest.Size()))
		n19, err := m.ChannelCreateRequest.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n19
	}
	if m.ChannelListRequest != nil {
		data[i] = 0x62
		i++
		i = encodeVarintChanner(data, i, uint64(m.ChannelListRequest.Size()))
		n20, err := m.ChannelListRequest.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n20
	}
	if m.Error != nil {
		data[i] = 0xf2
		i++
		data[i] = 0x1
		i++
		i = encodeVarintChanner(data, i, uint64(m.Error.Size()))
		n21, err := m.Error.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n21
	}
	if m.LoginResponse != nil {
		data[i] = 0xfa
		i++
		data[i] = 0x1
		i++
		i = encodeVarintChanner(data, i, uint64(m.LoginResponse.Size()))
		n22, err := m.LoginResponse.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n22
	}
	if m.PostResponse != nil {
		data[i] = 0x82
		i++
		data[i] = 0x2
		i++
		i = encodeVarintChanner(data, i, uint64(m.PostResponse.Size()))
		n23, err := m.PostResponse.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n23
	}
	if m.FetchResponse != nil {
		data[i] = 0x8a
		i++
		data[i] = 0x2
		i++
		i = encodeVarintChanner(data, i, uint64(m.FetchResponse.Size()))
		n24, err := m.FetchResponse.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n24
	}
	if m.ReadResponse != nil {
		data[i] = 0x92
		i++
		data[i] = 0x2
		i++
		i = encodeVarintChanner(data, i, uint64(m.ReadResponse.Size()))
		n25, err := m.ReadResponse.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n25
	}
	if m.EnterTopicResponse != nil {
		data[i] = 0x9a
		i++
		data[i] = 0x2
		i++
		i = encodeVarintChanner(data, i, uint64(m.EnterTopicResponse.Size()))
		n26, err := m.EnterTopicResponse.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n26
	}
	if m.ExitTopicResponse != nil {
		data[i] = 0xa2
		i++
		data[i] = 0x2
		i++
		i = encodeVarintChanner(data, i, uint64(m.ExitTopicResponse.Size()))
		n27, err := m.ExitTopicResponse.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n27
	}
	if m.PingResponse != nil {
		data[i] = 0xaa
		i++
		data[i] = 0x2
		i++
		i = encodeVarintChanner(data, i, uint64(m.PingResponse.Size()))
		n28, err := m.PingResponse.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n28
	}
	if m.RescueResponse != nil {
		data[i] = 0xb2
		i++
		data[i] = 0x2
		i++
		i = encodeVarintChanner(data, i, uint64(m.RescueResponse.Size()))
		n29, err := m.RescueResponse.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n29
	}
	if m.ChannelCreateResponse != nil {
		data[i] = 0xba
		i++
		data[i] = 0x2
		i++
		i = encodeVarintChanner(data, i, uint64(m.ChannelCreateResponse.Size()))
		n30, err := m.ChannelCreateResponse.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n30
	}
	if m.ChannelListResponse != nil {
		data[i] = 0xc2
		i++
		data[i] = 0x2
		i++
		i = encodeVarintChanner(data, i, uint64(m.ChannelListResponse.Size()))
		n31, err := m.ChannelListResponse.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n31
	}
	if m.PostNotify != nil {
		data[i] = 0xea
		i++
		data[i] = 0x3
		i++
		i = encodeVarintChanner(data, i, uint64(m.PostNotify.Size()))
		n32, err := m.PostNotify.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n32
	}
	return i, nil
}

func encodeFixed64Channer(data []byte, offset int, v uint64) int {
	data[offset] = uint8(v)
	data[offset+1] = uint8(v >> 8)
	data[offset+2] = uint8(v >> 16)
	data[offset+3] = uint8(v >> 24)
	data[offset+4] = uint8(v >> 32)
	data[offset+5] = uint8(v >> 40)
	data[offset+6] = uint8(v >> 48)
	data[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Channer(data []byte, offset int, v uint32) int {
	data[offset] = uint8(v)
	data[offset+1] = uint8(v >> 8)
	data[offset+2] = uint8(v >> 16)
	data[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintChanner(data []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		data[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	data[offset] = uint8(v)
	return offset + 1
}
func (m *HLC) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovChanner(uint64(m.Walltime))
	n += 1 + sovChanner(uint64(m.LogicalTs))
	return n
}

func (m *Post) Size() (n int) {
	var l int
	_ = l
	l = len(m.Text)
	n += 1 + l + sovChanner(uint64(l))
	if m.Ts != nil {
		l = m.Ts.Size()
		n += 1 + l + sovChanner(uint64(l))
	}
	if m.Options != nil {
		l = m.Options.Size()
		n += 1 + l + sovChanner(uint64(l))
	}
	return n
}

func (m *Post_Options) Size() (n int) {
	var l int
	_ = l
	if len(m.Refers) > 0 {
		for _, e := range m.Refers {
			l = e.Size()
			n += 1 + l + sovChanner(uint64(l))
		}
	}
	n += 2
	return n
}

func (m *Topic) Size() (n int) {
	var l int
	_ = l
	l = len(m.Name)
	n += 1 + l + sovChanner(uint64(l))
	if m.LastReadTs != nil {
		l = m.LastReadTs.Size()
		n += 1 + l + sovChanner(uint64(l))
	}
	if len(m.RecentPosts) > 0 {
		for _, e := range m.RecentPosts {
			l = e.Size()
			n += 1 + l + sovChanner(uint64(l))
		}
	}
	return n
}

func (m *Model) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *Model_Account) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovChanner(uint64(m.Id))
	l = len(m.User)
	n += 1 + l + sovChanner(uint64(l))
	n += 1 + sovChanner(uint64(m.Type))
	l = len(m.Secret)
	n += 1 + l + sovChanner(uint64(l))
	l = len(m.Pass)
	n += 1 + l + sovChanner(uint64(l))
	l = len(m.Mail)
	n += 1 + l + sovChanner(uint64(l))
	n += 1 + sovChanner(uint64(m.Status))
	return n
}

func (m *Model_Rescue) Size() (n int) {
	var l int
	_ = l
	if m.Id != nil {
		l = len(m.Id)
		n += 1 + l + sovChanner(uint64(l))
	}
	l = len(m.Account)
	n += 1 + l + sovChanner(uint64(l))
	n += 1 + sovChanner(uint64(m.ValidDate))
	return n
}

func (m *Model_Channel) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovChanner(uint64(m.Id))
	l = len(m.Name)
	n += 1 + l + sovChanner(uint64(l))
	l = len(m.Description)
	n += 1 + l + sovChanner(uint64(l))
	l = len(m.Style)
	n += 1 + l + sovChanner(uint64(l))
	n += 1 + sovChanner(uint64(m.Established))
	if m.Options != nil {
		l = len(m.Options)
		n += 1 + l + sovChanner(uint64(l))
	}
	return n
}

func (m *Model_Channel_Options) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovChanner(uint64(m.Identity))
	n += 1 + sovChanner(uint64(m.TopicDisplayStyle))
	n += 1 + sovChanner(uint64(m.TopicPostLimit))
	l = len(m.AnonymousName)
	n += 1 + l + sovChanner(uint64(l))
	return n
}

func (m *Model_Device) Size() (n int) {
	var l int
	_ = l
	l = len(m.Id)
	n += 1 + l + sovChanner(uint64(l))
	l = len(m.Type)
	n += 1 + l + sovChanner(uint64(l))
	n += 1 + sovChanner(uint64(m.Account))
	l = len(m.LastFrom)
	n += 1 + l + sovChanner(uint64(l))
	n += 1 + sovChanner(uint64(m.LastAccess))
	return n
}

func (m *Model_Node) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovChanner(uint64(m.Id))
	l = len(m.Address)
	n += 1 + l + sovChanner(uint64(l))
	n += 1 + sovChanner(uint64(m.Seed))
	return n
}

func (m *Model_Persona) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovChanner(uint64(m.Id))
	n += 1 + sovChanner(uint64(m.Channel))
	n += 1 + sovChanner(uint64(m.Account))
	l = len(m.Name)
	n += 1 + l + sovChanner(uint64(l))
	return n
}

func (m *Model_Post) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovChanner(uint64(m.Id))
	n += 1 + sovChanner(uint64(m.Topic))
	n += 1 + sovChanner(uint64(m.Persona))
	n += 1 + sovChanner(uint64(m.Attr))
	l = len(m.Text)
	n += 1 + l + sovChanner(uint64(l))
	return n
}

func (m *Model_Topic) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovChanner(uint64(m.Id))
	l = len(m.Name)
	n += 1 + l + sovChanner(uint64(l))
	return n
}

func (m *Model_Reaction) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovChanner(uint64(m.Id))
	n += 1 + sovChanner(uint64(m.Post))
	n += 1 + sovChanner(uint64(m.Type))
	n += 1 + sovChanner(uint64(m.Persona))
	l = len(m.Text)
	n += 1 + l + sovChanner(uint64(l))
	return n
}

func (m *Model_Service) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovChanner(uint64(m.Id))
	n += 1 + sovChanner(uint64(m.Channel))
	n += 1 + sovChanner(uint64(m.Account))
	return n
}

func (m *LoginRequest) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovChanner(uint64(m.Walltime))
	l = len(m.User)
	n += 1 + l + sovChanner(uint64(l))
	l = len(m.Version)
	n += 1 + l + sovChanner(uint64(l))
	l = len(m.Mail)
	n += 1 + l + sovChanner(uint64(l))
	if m.Id != nil {
		l = len(*m.Id)
		n += 1 + l + sovChanner(uint64(l))
	}
	if m.Sign != nil {
		l = len(*m.Sign)
		n += 1 + l + sovChanner(uint64(l))
	}
	if m.Pass != nil {
		l = len(*m.Pass)
		n += 1 + l + sovChanner(uint64(l))
	}
	if m.DeviceId != nil {
		l = len(*m.DeviceId)
		n += 1 + l + sovChanner(uint64(l))
	}
	if m.DeviceType != nil {
		l = len(*m.DeviceType)
		n += 1 + l + sovChanner(uint64(l))
	}
	if m.Rescue != nil {
		l = len(*m.Rescue)
		n += 1 + l + sovChanner(uint64(l))
	}
	return n
}

func (m *PostRequest) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovChanner(uint64(m.TopicId))
	n += 1 + sovChanner(uint64(m.Walltime))
	if m.Post != nil {
		l = m.Post.Size()
		n += 1 + l + sovChanner(uint64(l))
	}
	return n
}

func (m *FetchRequest) Size() (n int) {
	var l int
	_ = l
	if m.StartAt != nil {
		l = m.StartAt.Size()
		n += 1 + l + sovChanner(uint64(l))
	}
	if m.EndAt != nil {
		l = m.EndAt.Size()
		n += 1 + l + sovChanner(uint64(l))
	}
	n += 1 + sovChanner(uint64(m.Count))
	return n
}

func (m *ReadRequest) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovChanner(uint64(m.TopicId))
	if m.ReadPostTs != nil {
		l = m.ReadPostTs.Size()
		n += 1 + l + sovChanner(uint64(l))
	}
	return n
}

func (m *EnterTopicRequest) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovChanner(uint64(m.TopicId))
	return n
}

func (m *ExitTopicRequest) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovChanner(uint64(m.TopicId))
	return n
}

func (m *PingRequest) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovChanner(uint64(m.Walltime))
	return n
}

func (m *RescueRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.Account)
	n += 1 + l + sovChanner(uint64(l))
	l = len(m.Sign)
	n += 1 + l + sovChanner(uint64(l))
	n += 1 + sovChanner(uint64(m.Walltime))
	return n
}

func (m *ChannelCreateRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.Name)
	n += 1 + l + sovChanner(uint64(l))
	l = len(m.Description)
	n += 1 + l + sovChanner(uint64(l))
	l = len(m.Style)
	n += 1 + l + sovChanner(uint64(l))
	if m.Options != nil {
		l = m.Options.Size()
		n += 1 + l + sovChanner(uint64(l))
	}
	return n
}

func (m *ChannelListRequest) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovChanner(uint64(m.Category))
	n += 1 + sovChanner(uint64(m.Limit))
	return n
}

func (m *LoginResponse) Size() (n int) {
	var l int
	_ = l
	l = len(m.Id)
	n += 1 + l + sovChanner(uint64(l))
	l = len(m.Secret)
	n += 1 + l + sovChanner(uint64(l))
	if m.Pass != nil {
		l = len(*m.Pass)
		n += 1 + l + sovChanner(uint64(l))
	}
	if m.Mail != nil {
		l = len(*m.Mail)
		n += 1 + l + sovChanner(uint64(l))
	}
	if m.User != nil {
		l = len(*m.User)
		n += 1 + l + sovChanner(uint64(l))
	}
	return n
}

func (m *PostResponse) Size() (n int) {
	var l int
	_ = l
	if m.PostedAt != nil {
		l = m.PostedAt.Size()
		n += 1 + l + sovChanner(uint64(l))
	}
	return n
}

func (m *FetchResponse) Size() (n int) {
	var l int
	_ = l
	if len(m.Posts) > 0 {
		for _, e := range m.Posts {
			l = e.Size()
			n += 1 + l + sovChanner(uint64(l))
		}
	}
	return n
}

func (m *ReadResponse) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *EnterTopicResponse) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *ExitTopicResponse) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *PingResponse) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovChanner(uint64(m.Walltime))
	return n
}

func (m *RescueResponse) Size() (n int) {
	var l int
	_ = l
	l = len(m.Url)
	n += 1 + l + sovChanner(uint64(l))
	n += 1 + sovChanner(uint64(m.Remain))
	return n
}

func (m *ChannelCreateResponse) Size() (n int) {
	var l int
	_ = l
	if m.Channel != nil {
		l = m.Channel.Size()
		n += 1 + l + sovChanner(uint64(l))
	}
	return n
}

func (m *ChannelListResponse) Size() (n int) {
	var l int
	_ = l
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovChanner(uint64(l))
		}
	}
	return n
}

func (m *Error) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovChanner(uint64(m.Type))
	l = len(m.Explanation)
	n += 1 + l + sovChanner(uint64(l))
	return n
}

func (m *Payload) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovChanner(uint64(m.Type))
	n += 1 + sovChanner(uint64(m.Msgid))
	if m.LoginRequest != nil {
		l = m.LoginRequest.Size()
		n += 1 + l + sovChanner(uint64(l))
	}
	if m.PostRequest != nil {
		l = m.PostRequest.Size()
		n += 1 + l + sovChanner(uint64(l))
	}
	if m.FetchRequest != nil {
		l = m.FetchRequest.Size()
		n += 1 + l + sovChanner(uint64(l))
	}
	if m.ReadRequest != nil {
		l = m.ReadRequest.Size()
		n += 1 + l + sovChanner(uint64(l))
	}
	if m.EnterTopicRequest != nil {
		l = m.EnterTopicRequest.Size()
		n += 1 + l + sovChanner(uint64(l))
	}
	if m.ExitTopicRequest != nil {
		l = m.ExitTopicRequest.Size()
		n += 1 + l + sovChanner(uint64(l))
	}
	if m.PingRequest != nil {
		l = m.PingRequest.Size()
		n += 1 + l + sovChanner(uint64(l))
	}
	if m.RescueRequest != nil {
		l = m.RescueRequest.Size()
		n += 1 + l + sovChanner(uint64(l))
	}
	if m.ChannelCreateRequest != nil {
		l = m.ChannelCreateRequest.Size()
		n += 1 + l + sovChanner(uint64(l))
	}
	if m.ChannelListRequest != nil {
		l = m.ChannelListRequest.Size()
		n += 1 + l + sovChanner(uint64(l))
	}
	if m.Error != nil {
		l = m.Error.Size()
		n += 2 + l + sovChanner(uint64(l))
	}
	if m.LoginResponse != nil {
		l = m.LoginResponse.Size()
		n += 2 + l + sovChanner(uint64(l))
	}
	if m.PostResponse != nil {
		l = m.PostResponse.Size()
		n += 2 + l + sovChanner(uint64(l))
	}
	if m.FetchResponse != nil {
		l = m.FetchResponse.Size()
		n += 2 + l + sovChanner(uint64(l))
	}
	if m.ReadResponse != nil {
		l = m.ReadResponse.Size()
		n += 2 + l + sovChanner(uint64(l))
	}
	if m.EnterTopicResponse != nil {
		l = m.EnterTopicResponse.Size()
		n += 2 + l + sovChanner(uint64(l))
	}
	if m.ExitTopicResponse != nil {
		l = m.ExitTopicResponse.Size()
		n += 2 + l + sovChanner(uint64(l))
	}
	if m.PingResponse != nil {
		l = m.PingResponse.Size()
		n += 2 + l + sovChanner(uint64(l))
	}
	if m.RescueResponse != nil {
		l = m.RescueResponse.Size()
		n += 2 + l + sovChanner(uint64(l))
	}
	if m.ChannelCreateResponse != nil {
		l = m.ChannelCreateResponse.Size()
		n += 2 + l + sovChanner(uint64(l))
	}
	if m.ChannelListResponse != nil {
		l = m.ChannelListResponse.Size()
		n += 2 + l + sovChanner(uint64(l))
	}
	if m.PostNotify != nil {
		l = m.PostNotify.Size()
		n += 2 + l + sovChanner(uint64(l))
	}
	return n
}

func sovChanner(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozChanner(x uint64) (n int) {
	return sovChanner(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *HLC) Unmarshal(data []byte) error {
	var hasFields [1]uint64
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChanner
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HLC: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HLC: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Walltime", wireType)
			}
			m.Walltime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanner
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Walltime |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LogicalTs", wireType)
			}
			m.LogicalTs = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanner
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.LogicalTs |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000002)
		default:
			iNdEx = preIndex
			skippy, err := skipChanner(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChanner
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("walltime")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("logical_ts")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Post) Unmarshal(data []byte) error {
	var hasFields [1]uint64
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChanner
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Post: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Post: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Text", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanner
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChanner
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Text = string(data[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanner
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChanner
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Ts == nil {
				m.Ts = &HLC{}
			}
			if err := m.Ts.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Options", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanner
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChanner
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Options == nil {
				m.Options = &Post_Options{}
			}
			if err := m.Options.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChanner(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChanner
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("text")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Post_Options) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChanner
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Options: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Options: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Refers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanner
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChanner
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Refers = append(m.Refers, &HLC{})
			if err := m.Refers[len(m.Refers)-1].Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FetchUrl", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanner
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.FetchUrl = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipChanner(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChanner
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Topic) Unmarshal(data []byte) error {
	var hasFields [1]uint64
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChanner
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Topic: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Topic: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanner
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChanner
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(data[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastReadTs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanner
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChanner
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LastReadTs == nil {
				m.LastReadTs = &HLC{}
			}
			if err := m.LastReadTs.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecentPosts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanner
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChanner
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RecentPosts = append(m.RecentPosts, &Post{})
			if err := m.RecentPosts[len(m.RecentPosts)-1].Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChanner(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChanner
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("name")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("last_read_ts")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Model) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChanner
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Model: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Model: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipChanner(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChanner
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Model_Account) Unmarshal(data []byte) error {
	var hasFields [1]uint64
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChanner
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Account: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Account: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanner
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Id |= (UUID(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field User", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanner
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChanner
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.User = string(data[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanner
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Type |= (Model_Account_Type(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000004)
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Secret", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanner
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChanner
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Secret = string(data[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000008)
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pass", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanner
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChanner
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Pass = string(data[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000010)
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mail", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanner
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChanner
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Mail = string(data[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000020)
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanner
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Status |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000040)
		default:
			iNdEx = preIndex
			skippy, err := skipChanner(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChanner
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("id")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("user")
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("type")
	}
	if hasFields[0]&uint64(0x00000008) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("secret")
	}
	if hasFields[0]&uint64(0x00000010) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("pass")
	}
	if hasFields[0]&uint64(0x00000020) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("mail")
	}
	if hasFields[0]&uint64(0x00000040) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("status")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Model_Rescue) Unmarshal(data []byte) error {
	var hasFields [1]uint64
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChanner
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Rescue: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Rescue: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanner
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthChanner
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = append([]byte{}, data[iNdEx:postIndex]...)
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Account", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanner
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChanner
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Account = string(data[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidDate", wireType)
			}
			m.ValidDate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanner
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.ValidDate |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000004)
		default:
			iNdEx = preIndex
			skippy, err := skipChanner(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChanner
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("id")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("account")
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("valid_date")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Model_Channel) Unmarshal(data []byte) error {
	var hasFields [1]uint64
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChanner
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Channel: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Channel: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanner
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Id |= (UUID(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanner
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChanner
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(data[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanner
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChanner
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Style", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanner
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChanner
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Style = string(data[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000004)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Established", wireType)
			}
			m.Established = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanner
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Established |= (UUID(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000008)
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Options", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanner
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthChanner
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Options = append([]byte{}, data[iNdEx:postIndex]...)
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000010)
		default:
			iNdEx = preIndex
			skippy, err := skipChanner(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChanner
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("id")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("name")
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("style")
	}
	if hasFields[0]&uint64(0x00000008) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("established")
	}
	if hasFields[0]&uint64(0x00000010) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("options")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Model_Channel_Options) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChanner
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Options: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Options: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Identity", wireType)
			}
			m.Identity = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanner
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Identity |= (Model_Channel_IdentityLevel(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopicDisplayStyle", wireType)
			}
			m.TopicDisplayStyle = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanner
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.TopicDisplayStyle |= (Model_Channel_TopicDisplayStyle(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopicPostLimit", wireType)
			}
			m.TopicPostLimit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanner
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.TopicPostLimit |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AnonymousName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanner
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChanner
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AnonymousName = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChanner(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChanner
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Model_Device) Unmarshal(data []byte) error {
	var hasFields [1]uint64
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChanner
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Device: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Device: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanner
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChanner
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(data[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanner
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChanner
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(data[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Account", wireType)
			}
			m.Account = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanner
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Account |= (UUID(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000004)
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastFrom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanner
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChanner
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LastFrom = string(data[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000008)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastAccess", wireType)
			}
			m.LastAccess = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanner
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.LastAccess |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000010)
		default:
			iNdEx = preIndex
			skippy, err := skipChanner(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChanner
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("id")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("type")
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("account")
	}
	if hasFields[0]&uint64(0x00000008) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("last_from")
	}
	if hasFields[0]&uint64(0x00000010) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("last_access")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Model_Node) Unmarshal(data []byte) error {
	var hasFields [1]uint64
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChanner
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Node: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Node: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanner
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Id |= (UUID(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanner
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChanner
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(data[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seed", wireType)
			}
			m.Seed = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanner
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Seed |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000004)
		default:
			iNdEx = preIndex
			skippy, err := skipChanner(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChanner
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("id")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("address")
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("seed")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Model_Persona) Unmarshal(data []byte) error {
	var hasFields [1]uint64
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChanner
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Persona: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Persona: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanner
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Id |= (UUID(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Channel", wireType)
			}
			m.Channel = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanner
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Channel |= (UUID(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Account", wireType)
			}
			m.Account = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanner
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Account |= (UUID(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000004)
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanner
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChanner
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(data[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000008)
		default:
			iNdEx = preIndex
			skippy, err := skipChanner(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChanner
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("id")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("channel")
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("account")
	}
	if hasFields[0]&uint64(0x00000008) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("name")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Model_Post) Unmarshal(data []byte) error {
	var hasFields [1]uint64
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChanner
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Post: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Post: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanner
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Id |= (UUID(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Topic", wireType)
			}
			m.Topic = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanner
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Topic |= (UUID(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Persona", wireType)
			}
			m.Persona = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanner
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Persona |= (UUID(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000004)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attr", wireType)
			}
			m.Attr = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanner
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Attr |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000008)
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Text", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanner
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChanner
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Text = string(data[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000010)
		default:
			iNdEx = preIndex
			skippy, err := skipChanner(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChanner
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("id")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("topic")
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("persona")
	}
	if hasFields[0]&uint64(0x00000008) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("attr")
	}
	if hasFields[0]&uint64(0x00000010) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("text")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Model_Topic) Unmarshal(data []byte) error {
	var hasFields [1]uint64
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChanner
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Topic: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Topic: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanner
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Id |= (UUID(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanner
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChanner
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(data[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000002)
		default:
			iNdEx = preIndex
			skippy, err := skipChanner(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChanner
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("id")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("name")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Model_Reaction) Unmarshal(data []byte) error {
	var hasFields [1]uint64
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChanner
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Reaction: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Reaction: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanner
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Id |= (UUID(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Post", wireType)
			}
			m.Post = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanner
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Post |= (UUID(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanner
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Type |= (Model_Reaction_Type(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000004)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Persona", wireType)
			}
			m.Persona = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanner
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Persona |= (UUID(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000008)
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Text", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanner
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChanner
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Text = string(data[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000010)
		default:
			iNdEx = preIndex
			skippy, err := skipChanner(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChanner
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("id")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("post")
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("type")
	}
	if hasFields[0]&uint64(0x00000008) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("persona")
	}
	if hasFields[0]&uint64(0x00000010) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("text")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Model_Service) Unmarshal(data []byte) error {
	var hasFields [1]uint64
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChanner
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Service: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Service: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanner
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Id |= (UUID(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Channel", wireType)
			}
			m.Channel = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanner
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Channel |= (UUID(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Account", wireType)
			}
			m.Account = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanner
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Account |= (UUID(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000004)
		default:
			iNdEx = preIndex
			skippy, err := skipChanner(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChanner
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("id")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("channel")
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("account")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LoginRequest) Unmarshal(data []byte) error {
	var hasFields [1]uint64
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChanner
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LoginRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LoginRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Walltime", wireType)
			}
			m.Walltime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanner
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Walltime |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field User", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanner
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChanner
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.User = string(data[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanner
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChanner
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Version = string(data[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000004)
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mail", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanner
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChanner
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Mail = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanner
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChanner
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(data[iNdEx:postIndex])
			m.Id = &s
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sign", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanner
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChanner
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(data[iNdEx:postIndex])
			m.Sign = &s
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pass", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanner
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChanner
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(data[iNdEx:postIndex])
			m.Pass = &s
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeviceId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanner
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChanner
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(data[iNdEx:postIndex])
			m.DeviceId = &s
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeviceType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanner
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChanner
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(data[iNdEx:postIndex])
			m.DeviceType = &s
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rescue", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanner
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChanner
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(data[iNdEx:postIndex])
			m.Rescue = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChanner(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChanner
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("walltime")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("user")
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("version")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PostRequest) Unmarshal(data []byte) error {
	var hasFields [1]uint64
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChanner
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PostRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PostRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopicId", wireType)
			}
			m.TopicId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanner
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.TopicId |= (UUID(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Walltime", wireType)
			}
			m.Walltime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanner
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Walltime |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Post", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanner
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChanner
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Post == nil {
				m.Post = &Post{}
			}
			if err := m.Post.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000004)
		default:
			iNdEx = preIndex
			skippy, err := skipChanner(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChanner
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("topic_id")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("walltime")
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("post")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FetchRequest) Unmarshal(data []byte) error {
	var hasFields [1]uint64
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChanner
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FetchRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FetchRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanner
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChanner
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.StartAt == nil {
				m.StartAt = &HLC{}
			}
			if err := m.StartAt.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanner
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChanner
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.EndAt == nil {
				m.EndAt = &HLC{}
			}
			if err := m.EndAt.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanner
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Count |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipChanner(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChanner
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("start_at")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReadRequest) Unmarshal(data []byte) error {
	var hasFields [1]uint64
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChanner
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReadRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReadRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopicId", wireType)
			}
			m.TopicId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanner
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.TopicId |= (UUID(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReadPostTs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanner
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChanner
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ReadPostTs == nil {
				m.ReadPostTs = &HLC{}
			}
			if err := m.ReadPostTs.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000002)
		default:
			iNdEx = preIndex
			skippy, err := skipChanner(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChanner
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("topic_id")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("read_post_ts")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EnterTopicRequest) Unmarshal(data []byte) error {
	var hasFields [1]uint64
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChanner
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EnterTopicRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EnterTopicRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopicId", wireType)
			}
			m.TopicId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanner
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.TopicId |= (UUID(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		default:
			iNdEx = preIndex
			skippy, err := skipChanner(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChanner
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("topic_id")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ExitTopicRequest) Unmarshal(data []byte) error {
	var hasFields [1]uint64
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChanner
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ExitTopicRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ExitTopicRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopicId", wireType)
			}
			m.TopicId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanner
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.TopicId |= (UUID(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		default:
			iNdEx = preIndex
			skippy, err := skipChanner(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChanner
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("topic_id")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PingRequest) Unmarshal(data []byte) error {
	var hasFields [1]uint64
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChanner
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PingRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PingRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Walltime", wireType)
			}
			m.Walltime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanner
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Walltime |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		default:
			iNdEx = preIndex
			skippy, err := skipChanner(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChanner
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("walltime")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RescueRequest) Unmarshal(data []byte) error {
	var hasFields [1]uint64
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChanner
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RescueRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RescueRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Account", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanner
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChanner
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Account = string(data[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sign", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanner
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChanner
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sign = string(data[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Walltime", wireType)
			}
			m.Walltime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanner
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Walltime |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000004)
		default:
			iNdEx = preIndex
			skippy, err := skipChanner(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChanner
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("account")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("sign")
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("walltime")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChannelCreateRequest) Unmarshal(data []byte) error {
	var hasFields [1]uint64
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChanner
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChannelCreateRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChannelCreateRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanner
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChanner
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(data[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanner
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChanner
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Style", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanner
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChanner
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Style = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Options", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanner
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChanner
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Options == nil {
				m.Options = &Model_Channel_Options{}
			}
			if err := m.Options.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChanner(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChanner
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("name")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChannelListRequest) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChanner
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChannelListRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChannelListRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Category", wireType)
			}
			m.Category = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanner
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Category |= (ChannelListRequest_Category(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanner
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Limit |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipChanner(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChanner
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LoginResponse) Unmarshal(data []byte) error {
	var hasFields [1]uint64
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChanner
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LoginResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LoginResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanner
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChanner
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(data[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Secret", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanner
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChanner
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Secret = string(data[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pass", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanner
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChanner
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(data[iNdEx:postIndex])
			m.Pass = &s
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mail", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanner
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChanner
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(data[iNdEx:postIndex])
			m.Mail = &s
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field User", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanner
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChanner
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(data[iNdEx:postIndex])
			m.User = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChanner(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChanner
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("id")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("secret")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PostResponse) Unmarshal(data []byte) error {
	var hasFields [1]uint64
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChanner
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PostResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PostResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PostedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanner
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChanner
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PostedAt == nil {
				m.PostedAt = &HLC{}
			}
			if err := m.PostedAt.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		default:
			iNdEx = preIndex
			skippy, err := skipChanner(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChanner
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("posted_at")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FetchResponse) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChanner
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FetchResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FetchResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Posts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanner
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChanner
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Posts = append(m.Posts, &Post{})
			if err := m.Posts[len(m.Posts)-1].Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChanner(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChanner
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReadResponse) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChanner
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReadResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReadResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipChanner(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChanner
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EnterTopicResponse) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChanner
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EnterTopicResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EnterTopicResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipChanner(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChanner
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ExitTopicResponse) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChanner
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ExitTopicResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ExitTopicResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipChanner(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChanner
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PingResponse) Unmarshal(data []byte) error {
	var hasFields [1]uint64
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChanner
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PingResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PingResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Walltime", wireType)
			}
			m.Walltime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanner
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Walltime |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		default:
			iNdEx = preIndex
			skippy, err := skipChanner(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChanner
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("walltime")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RescueResponse) Unmarshal(data []byte) error {
	var hasFields [1]uint64
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChanner
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RescueResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RescueResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Url", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanner
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChanner
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Url = string(data[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Remain", wireType)
			}
			m.Remain = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanner
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Remain |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000002)
		default:
			iNdEx = preIndex
			skippy, err := skipChanner(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChanner
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("url")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("remain")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChannelCreateResponse) Unmarshal(data []byte) error {
	var hasFields [1]uint64
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChanner
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChannelCreateResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChannelCreateResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Channel", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanner
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChanner
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Channel == nil {
				m.Channel = &Model_Channel{}
			}
			if err := m.Channel.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		default:
			iNdEx = preIndex
			skippy, err := skipChanner(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChanner
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("channel")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChannelListResponse) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChanner
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChannelListResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChannelListResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanner
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChanner
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &Model_Channel{})
			if err := m.List[len(m.List)-1].Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChanner(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChanner
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Error) Unmarshal(data []byte) error {
	var hasFields [1]uint64
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChanner
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Error: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Error: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanner
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Type |= (Error_Type(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Explanation", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanner
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChanner
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Explanation = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChanner(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChanner
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("type")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Payload) Unmarshal(data []byte) error {
	var hasFields [1]uint64
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChanner
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Payload: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Payload: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanner
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Type |= (Payload_Type(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msgid", wireType)
			}
			m.Msgid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanner
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Msgid |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LoginRequest", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanner
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChanner
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LoginRequest == nil {
				m.LoginRequest = &LoginRequest{}
			}
			if err := m.LoginRequest.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PostRequest", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanner
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChanner
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PostRequest == nil {
				m.PostRequest = &PostRequest{}
			}
			if err := m.PostRequest.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FetchRequest", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanner
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChanner
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FetchRequest == nil {
				m.FetchRequest = &FetchRequest{}
			}
			if err := m.FetchRequest.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReadRequest", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanner
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChanner
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ReadRequest == nil {
				m.ReadRequest = &ReadRequest{}
			}
			if err := m.ReadRequest.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnterTopicRequest", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanner
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChanner
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.EnterTopicRequest == nil {
				m.EnterTopicRequest = &EnterTopicRequest{}
			}
			if err := m.EnterTopicRequest.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExitTopicRequest", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanner
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChanner
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ExitTopicRequest == nil {
				m.ExitTopicRequest = &ExitTopicRequest{}
			}
			if err := m.ExitTopicRequest.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PingRequest", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanner
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChanner
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PingRequest == nil {
				m.PingRequest = &PingRequest{}
			}
			if err := m.PingRequest.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RescueRequest", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanner
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChanner
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RescueRequest == nil {
				m.RescueRequest = &RescueRequest{}
			}
			if err := m.RescueRequest.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelCreateRequest", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanner
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChanner
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ChannelCreateRequest == nil {
				m.ChannelCreateRequest = &ChannelCreateRequest{}
			}
			if err := m.ChannelCreateRequest.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelListRequest", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanner
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChanner
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ChannelListRequest == nil {
				m.ChannelListRequest = &ChannelListRequest{}
			}
			if err := m.ChannelListRequest.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 30:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanner
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChanner
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Error == nil {
				m.Error = &Error{}
			}
			if err := m.Error.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 31:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LoginResponse", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanner
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChanner
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LoginResponse == nil {
				m.LoginResponse = &LoginResponse{}
			}
			if err := m.LoginResponse.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 32:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PostResponse", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanner
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChanner
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PostResponse == nil {
				m.PostResponse = &PostResponse{}
			}
			if err := m.PostResponse.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 33:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FetchResponse", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanner
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChanner
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FetchResponse == nil {
				m.FetchResponse = &FetchResponse{}
			}
			if err := m.FetchResponse.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 34:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReadResponse", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanner
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChanner
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ReadResponse == nil {
				m.ReadResponse = &ReadResponse{}
			}
			if err := m.ReadResponse.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 35:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnterTopicResponse", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanner
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChanner
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.EnterTopicResponse == nil {
				m.EnterTopicResponse = &EnterTopicResponse{}
			}
			if err := m.EnterTopicResponse.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 36:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExitTopicResponse", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanner
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChanner
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ExitTopicResponse == nil {
				m.ExitTopicResponse = &ExitTopicResponse{}
			}
			if err := m.ExitTopicResponse.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 37:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PingResponse", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanner
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChanner
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PingResponse == nil {
				m.PingResponse = &PingResponse{}
			}
			if err := m.PingResponse.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 38:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RescueResponse", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanner
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChanner
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RescueResponse == nil {
				m.RescueResponse = &RescueResponse{}
			}
			if err := m.RescueResponse.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 39:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelCreateResponse", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanner
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChanner
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ChannelCreateResponse == nil {
				m.ChannelCreateResponse = &ChannelCreateResponse{}
			}
			if err := m.ChannelCreateResponse.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 40:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelListResponse", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanner
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChanner
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ChannelListResponse == nil {
				m.ChannelListResponse = &ChannelListResponse{}
			}
			if err := m.ChannelListResponse.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 61:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PostNotify", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanner
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChanner
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PostNotify == nil {
				m.PostNotify = &Post{}
			}
			if err := m.PostNotify.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChanner(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChanner
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("type")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipChanner(data []byte) (n int, err error) {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowChanner
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowChanner
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if data[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowChanner
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthChanner
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowChanner
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := data[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipChanner(data[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthChanner = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowChanner   = fmt.Errorf("proto: integer overflow")
)
