package channer

import (
	"encoding/json"
	"os"
	"flag"
)

//Config represents common configuration of channer servers
type Config struct {
	EndPoint        	string      `json:"endpoint"`
	ListenAddress   	string      `json:"listen"`
	DisableOriginCheck  bool        `json:"disable_origin_check"`
	CertPath            string 		`json:"cert"`
	KeyPath				string 		`json:"key"`
	AssetsConfigURL     string      `json:"assets_config_url"`
	DBHost				string      `json:"database_host"`
	DBCertPath          string      `json:"database_cert"`
	AssetsConfigPath     string
}

//check_and_fill check configuration, if configuration seems not set, 
//it aborts or set default value
func (c *Config) check_and_fill() error {
	if c.EndPoint == "" {
		c.EndPoint = "/ws"
	}
	if c.ListenAddress == "" {
		c.ListenAddress = "0.0.0.0:8888"
	}
	return nil
}

//Parse() pareses comannd line argument, and store it to newly created Config object, and return it.
func (c *Config) Parse() error {
	s := flag.String("c", "", "configuration file for channer server")
	a := flag.String("a", "", "client asset setting which is generated by webpack")
	devdb := flag.String("devdb", "", "specify development database hostname")
	flag.Parse()
	err := c.Load(*s)
	c.AssetsConfigPath = *a
	c.DBHost = *devdb
	return err
}
func (c *Config) Load(path string) error {
	f, err := os.Open(path)
	if err != nil {
		return err
	}
	//reinitialize config value
	*c = Config{}
	dec := json.NewDecoder(f)
	if err := dec.Decode(c); err != nil {
		return err
	}
	if err := c.check_and_fill(); err != nil {
		return err
	}
	return nil
}

